# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-19 11:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/Concepts/Basic/About-Parameters.rst:7
#: 4cd7147beb284a97ba2ababcbcc270cf
msgid "Parameters"
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:10
#: 321bad0b3ac641b68e0d04587c668763
msgid "Table of Contents"
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:13
#: 75bb3c37346347538ca6f02fbd6ac2bf
msgid "Overview"
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:15
#: f73ab18c224e4edfba81b9d4e6f07e87
msgid ""
"Parameters in ROS 2 are associated with individual nodes. Parameters are "
"used to configure nodes at startup (and during runtime), without changing"
" the code. The lifetime of a parameter is tied to the lifetime of the "
"node (though the node could implement some sort of persistence to reload "
"values after restart)."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:19
#: 8532bbb6e3e34bfcb9886bae30f82086
msgid ""
"Parameters are addressed by node name, node namespace, parameter name, "
"and parameter namespace. Providing a parameter namespace is optional."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:22
#: 8f6f061ae3dd41a98cd15e5bcffe23cc
msgid ""
"Each parameter consists of a key, a value, and a descriptor. The key is a"
" string and the value is one of the following types: ``bool``, ``int64``,"
" ``float64``, ``string``, ``byte[]``, ``bool[]``, ``int64[]``, "
"``float64[]`` or ``string[]``. By default all descriptors are empty, but "
"can contain parameter descriptions, value ranges, type information, and "
"additional constraints."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:26
#: ccdfb40371774c7b92aa978232aa36ff
msgid ""
"For an hands-on tutorial with ROS parameters see :doc:`../../Tutorials"
"/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-"
"ROS2-Parameters`."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:29
#: d54eda3395d64233ae2f51b5f100f96c
msgid "Parameters background"
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:32
#: c2bade21460e4da3a07e887d27dfa201
msgid "Declaring parameters"
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:34
#: 45043247920f42cb993be0ec967fcf60
msgid ""
"By default, a node needs to *declare* all of the parameters that it will "
"accept during its lifetime. This is so that the type and name of the "
"parameters are well-defined at node startup time, which reduces the "
"chances of misconfiguration later on. See :doc:`../../Tutorials/Beginner-"
"Client-Libraries/Using-Parameters-In-A-Class-CPP` or "
":doc:`../../Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A"
"-Class-Python` for tutorials on declaring and using parameters from a "
"node."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:38
#: 51fbc635dee845328de0d819c75d914e
msgid ""
"For some types of nodes, not all of the parameters will be known ahead of"
" time. In these cases, the node can be instantiated with "
"``allow_undeclared_parameters`` set to ``true``, which will allow "
"parameters to be get and set on the node even if they haven't been "
"declared."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:42
#: 689d72da08164be388fd22ee94b05c86
msgid "Parameter types"
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:44
#: 1963ce2a2bb84cb9a913be5e99290701
msgid ""
"Each parameter on a ROS 2 node has one of the pre-defined parameter types"
" as mentioned in the Overview. By default, attempts to change the type of"
" a declared parameter at runtime will fail. This prevents common "
"mistakes, such as putting a boolean value into an integer parameter."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:48
#: 8b2b66c6c2ec48bb822487d7521e39b4
msgid ""
"If a parameter needs to be multiple different types, and the code using "
"the parameter can handle it, this default behavior can be changed. When "
"the parameter is declared, it should be declared using a "
"``ParameterDescriptor`` with the ``dynamic_typing`` member variable set "
"to ``true``."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:52
#: 55c9eb149cc24819baec8fc295a48b05
msgid "Parameter callbacks"
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:54
#: c0bb9451a4374f3281390c25486037a9
msgid ""
"A ROS 2 node can register three different types of callbacks to be "
"informed when changes are happening to parameters. All three of the "
"callbacks are optional."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:57
#: 725b3615f8f242378cddf6d4a229039e
msgid ""
"The first is known as a \"pre set parameter\" callback, and can be set by"
" calling ``add_pre_set_parameters_callback`` from the node API. This "
"callback is passed a list of the ``Parameter`` objects that are being "
"changed, and returns nothing. When it is called, it can modify the "
"``Parameter`` list to change, add, or remove entries. As an example, if "
"``parameter2`` should change anytime that ``parameter1`` changes, that "
"can be implemented with this callback."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:62
#: 156fbf5d131b48e4a188072fc25608a2
msgid ""
"The second is known as a \"set parameter\" callback, and can be set by "
"calling ``add_on_set_parameters_callback`` from the node API. The "
"callback is passed a list of immutable ``Parameter`` objects, and returns"
" an ``rcl_interfaces/msg/SetParametersResult``. The main purpose of this "
"callback is to give the user the ability to inspect the upcoming change "
"to the parameter and explicitly reject the change."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:67
#: 85d97b39ed034c19adacea007e5c2bcb
msgid ""
"It is important that \"set parameter\" callbacks have no side-effects. "
"Since multiple \"set parameter\" callbacks can be chained, there is no "
"way for an individual callback to know if a later callback will reject "
"the update. If the individual callback were to make changes to the class "
"it is in, for instance, it may get out-of-sync with the actual parameter."
" To get a callback *after* a parameter has been successfully changed, see"
" the next type of callback below."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:72
#: 2f8579d903314389a7064e178d396690
msgid ""
"The third type of callback is known as an \"post set parameter\" "
"callback, and can be set by calling ``add_post_set_parameters_callback`` "
"from the node API. The callback is passed a list of immutable "
"``Parameter`` objects, and returns nothing. The main purpose of this "
"callback is to give the user the ability to react to changes from "
"parameters that have successfully been accepted."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:76
#: 707e9c2ff2f5423da69693461f0b3ec4
msgid ""
"The ROS 2 demos have an `example "
"<https://github.com/ros2/demos/blob/rolling/demo_nodes_cpp/src/parameters/set_parameters_callback.cpp>`__"
" of all of these callbacks in use."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:79
#: 347792c569594c059ac286f7ad23fc2f
msgid "Interacting with parameters"
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:81
#: 164ec652b6fe417eaea979e9a55a9630
msgid ""
"ROS 2 nodes can perform parameter operations through node APIs as "
"described in :doc:`../../Tutorials/Beginner-Client-Libraries/Using-"
"Parameters-In-A-Class-CPP` or :doc:`../../Tutorials/Beginner-Client-"
"Libraries/Using-Parameters-In-A-Class-Python`. External processes can "
"perform parameter operations via parameter services that are created by "
"default when a node is instantiated. The services that are created by "
"default are:"
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:85
#: c8946abbfabc4d158ce4dc724644f468
msgid ""
"``/node_name/describe_parameters``: Uses a service type of "
"``rcl_interfaces/srv/DescribeParameters``. Given a list of parameter "
"names, returns a list of descriptors associated with the parameters."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:87
#: fb2477ff27314ba3a6ad3e4fbccda73d
msgid ""
"``/node_name/get_parameter_types``: Uses a service type of "
"``rcl_interfaces/srv/GetParameterTypes``. Given a list of parameter "
"names, returns a list of parameter types associated with the parameters."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:89
#: 42059768a08d448c8cf49a36e8fbe300
msgid ""
"``/node_name/get_parameters``: Uses a service type of "
"``rcl_interfaces/srv/GetParameters``. Given a list of parameter names, "
"returns a list of parameter values associated with the parameters."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:91
#: 30b5edcead1a488c92e2586bf95a48c0
msgid ""
"``/node_name/list_parameters``: Uses a service type of "
"``rcl_interfaces/srv/ListParameters``. Given an optional list of "
"parameter prefixes, returns a list of the available parameters with that "
"prefix.  If the prefixes are empty, returns all parameters."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:93
#: de23527b964d46b892f645baabc82e97
msgid ""
"``/node_name/set_parameters``: Uses a service type of "
"``rcl_interfaces/srv/SetParameters``. Given a list of parameter names and"
" values, attempts to set the parameters on the node.  Returns a list of "
"results from trying to set each parameter; some of them may have "
"succeeded and some may have failed."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:95
#: a97665e95608457e80e6fcafee3f3900
msgid ""
"``/node_name/set_parameters_atomically``: Uses a service type of "
"``rcl_interfaces/srv/SetParametersAtomically``. Given a list of parameter"
" names and values, attempts to set the parameters on the node.  Returns a"
" single result from trying to set all parameters, so if one failed, all "
"of them failed."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:99
#: 1023a517e3d94540a74d5859dc28e305
msgid "Setting initial parameter values when running a node"
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:101
#: e2bee60f541e424899882aa75d6b08ab
msgid ""
"Initial parameter values can be set when running the node either through "
"individual command-line arguments, or through YAML files. See "
":ref:`NodeArgsParameters` for examples on how to set initial parameter "
"values."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:105
#: 5d4095b3da4a4c37b7dcee07fca45a25
msgid "Setting initial parameter values when launching nodes"
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:107
#: 91b6d548636545fc99b14cf709210b90
msgid ""
"Initial parameter values can also be set when running the node through "
"the ROS 2 launch facility. See :doc:`this document "
"<../../Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-"
"Projects>` for information on how to specify parameters via launch."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:111
#: 652e358058ef4225bf47f63ee86b9002
msgid "Manipulating parameter values at runtime"
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:113
#: 47fe1dd3d5294ca7993eb1635e076752
msgid ""
"The ``ros2 param`` command is the general way to interact with parameters"
" for nodes that are already running. ``ros2 param`` uses the parameter "
"service API as described above to perform the various operations. See "
":doc:`this how-to guide <../../How-To-Guides/Using-ros2-param>` for "
"details on how to use ``ros2 param``."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:118
#: 88450a24f351408880af5de53a633061
msgid "Migrating from ROS 1"
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:120
#: 0773a3f123924b658e12aec360507d8d
msgid ""
"The :doc:`Launch file migration guide <../../How-To-Guides/Launch-files-"
"migration-guide>` explains how to migrate ``param`` and ``rosparam`` "
"launch tags from ROS 1 to ROS 2."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:122
#: 334467695c8846a3be3ca88b3592ee63
msgid ""
"The :doc:`YAML parameter file migration guide <../../How-To-Guides"
"/Parameters-YAML-files-migration-guide>` explains how to migrate "
"parameter files from ROS 1 to ROS 2."
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:124
#: 5310c6401e664646acd1955bd1aec987
msgid ""
"In ROS 1, the ``roscore`` acted like a global parameter blackboard where "
"all nodes could get and set parameters. Since there is no central "
"``roscore`` in ROS 2, that functionality no longer exists. The "
"recommended approach in ROS 2 is to use per-node parameters that are "
"closely tied to the nodes that use them. If a global blackboard is still "
"needed, it is possible to create a dedicated node for this purpose. ROS 2"
" ships with one in the ``ros-rolling-demo-nodes-cpp`` package called "
"``parameter_blackboard``; it can be run with:"
msgstr ""

#: ../../source/Concepts/Basic/About-Parameters.rst:134
#: 222d00c399eb4d03ac968ce856de3459
msgid ""
"The code for the ``parameter_blackboard`` is `here "
"<https://github.com/ros2/demos/blob/rolling/demo_nodes_cpp/src/parameters/parameter_blackboard.cpp>`__."
msgstr ""

