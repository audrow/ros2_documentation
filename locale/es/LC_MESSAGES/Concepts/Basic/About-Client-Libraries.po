# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-19 11:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:9
#: 7167d4eba5d74f939eb031b73631af38
msgid "Client libraries"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:12
#: 9ba28873a07f42a788c59abbd5991bed
msgid "Table of Contents"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:15
#: 74287cb909fd4cd799b172c8ada38f9b
msgid "Overview"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:17
#: 0bcdb2154a30440aa177f59403f81f7b
msgid ""
"Client libraries are the APIs that allow users to implement their ROS 2 "
"code. Using client libraries, users gain access to ROS 2 concepts such as"
" nodes, topics, services, etc. Client libraries come in a variety of "
"programming languages so that users may write ROS 2 code in the language "
"that is best-suited for their application. For example, you might prefer "
"to write visualization tools in Python because it makes prototyping "
"iterations faster, while for parts of your system that are concerned with"
" efficiency, the nodes might be better implemented in C++."
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:22
#: cadfb6da24f4499aa32772dd89373423
msgid ""
"Nodes written using different client libraries are able to share messages"
" with each other because all client libraries implement code generators "
"that provide users with the capability to interact with ROS 2 interface "
"files in the respective language."
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:24
#: 8dc867e9a0e74b8cbdd5d2bc9db52852
msgid ""
"In addition to the language-specific communication tools, client "
"libraries expose to users the core functionality that makes ROS \"ROS\". "
"For example, here is a list of functionality that can typically be "
"accessed through a client library:"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:27
#: 9ae78f4e17eb439b9a607f1010f4ed13
msgid "Names and namespaces"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:28
#: f60e88ed44c04d1c836d37ed25993c39
msgid "Time (real or simulated)"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:29
#: 5bde7bd85d6e4c6382908f0f5ab47d35
msgid "Parameters"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:30
#: a1a483a87f6c4a9ea1cf21bf59c8d9c9
msgid "Console logging"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:31
#: 13914e99e74941b6944c17ea637293a1
msgid "Threading model"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:32
#: c8b39ac8dee04740ac64babf1029e618
msgid "Intra-process communication"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:35
#: 7ab0c0ffb72e43c0875198155c7c439d
msgid "Supported client libraries"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:37
#: e317a72dcc5f433491aa16e22bfbd8e4
msgid ""
"The C++ client library (``rclcpp``) and the Python client library "
"(``rclpy``) are both client libraries which utilize common functionality "
"in ``rcl``."
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:40
#: 06cc027d378f49ed828b50ac302d0577
msgid "The ``rclcpp`` package"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:42
#: 890a601e6794406b806497076f4204a0
msgid ""
"The ROS Client Library for C++ (``rclcpp``) is the user facing, C++ "
"idiomatic interface which provides all of the ROS client functionality "
"like creating nodes, publishers, and subscriptions. ``rclcpp`` builds on "
"top of ``rcl`` and the ``rosidl`` |API|, and it is designed to be used "
"with the C++ messages generated by ``rosidl_generator_cpp``."
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:45
#: faf824ba9a8042bba94156300a7c355d
msgid ""
"``rclcpp`` makes use of all the features of C++ and C++17 to make the "
"interface as easy to use as possible, but since it reuses the "
"implementation in ``rcl`` it is able maintain a consistent behavior with "
"the other client libraries that use the ``rcl`` |API|."
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:47
#: 9e439aa0d7cc4510bb9ebd13f90a7e8a
msgid ""
"The ``rclcpp`` repository is located on GitHub at `ros2/rclcpp "
"<https://github.com/ros2/rclcpp>`_ and contains the |package| ``rclcpp``."
" The generated |API| documentation is here:"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:50
#: 76a0088c071c468f8e5d5239a59ca1eb
msgid "`api/rclcpp/index.html <http://docs.ros.org/en/rolling/p/rclcpp>`_"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:53
#: e3bb41ea58404700a4e9622597733845
msgid "The ``rclpy`` package"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:55
#: 04c98588c611497ab00cd289a298b011
msgid ""
"The ROS Client Library for Python (``rclpy``) is the Python counterpart "
"to the C++ client library. Like the C++ client library, ``rclpy`` also "
"builds on top of the ``rcl`` C API for its implementation. The interface "
"provides an idiomatic Python experience that uses native Python types and"
" patterns like lists and context objects. By using the ``rcl`` |API| in "
"the implementation, it stays consistent with the other client libraries "
"in terms of feature parity and behavior. In addition to providing Python "
"idiomatic bindings around the ``rcl`` |API| and Python classes for each "
"message, the Python client library takes care of the execution model, "
"using ``threading.Thread`` or similar to run the functions in the ``rcl``"
" |API|."
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:61
#: 3edd5efd4b544529a73c94d5d6217310
msgid ""
"Like C++ it generates custom Python code for each ROS message that the "
"user interacts with, but unlike C++ it eventually converts the native "
"Python message object into the C version of the message. All operations "
"happen on the Python version of the messages until they need to be passed"
" into the ``rcl`` layer, at which point they are converted into the plain"
" C version of the message so it can be passed into the ``rcl`` C |API|. "
"This is avoided if possible when communicating between publishers and "
"subscriptions in the same process to cut down on the conversion into and "
"out of Python."
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:65
#: c1660e82293e47fba9fb9853990fb55f
msgid ""
"The ``rclpy`` repository is located on GitHub at `ros2/rclpy "
"<https://github.com/ros2/rclpy>`_ and contains the |package| ``rclpy``. "
"The generated |API| documentation is here:"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:68
#: b399bb1a84d5496d8ebd40037694bc69
msgid "`api/rclpy/index.html <https://docs.ros.org/en/rolling/p/rclpy/>`_"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:72
#: f1b0bbd0cd864e55a6a485c04041ca03
msgid "Community-maintained"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:74
#: 2d006675f1ce482982481ec9e8452bab
msgid ""
"While the C++ and Python client libraries are maintained by the core ROS "
"2 team, members of the ROS 2 community maintain additional client "
"libraries:"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:76
#: eba3cb267fae4ab195ab093ebd0f7574
msgid ""
"`C <https://github.com/ros2/rclc>`__  ``rclc`` does not put a layer on "
"top of rcl but complements rcl to make rcl+rclc a feature-complete client"
" library in C. See `micro.ros.org <https://micro.ros.org/>`__ for "
"tutorials."
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:77
#: 0803f2d1f99f4bf6b46d8af5e08abc24
msgid ""
"`JVM and Android <https://github.com/ros2-java>`__ Java and Android "
"bindings for ROS 2."
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:78
#: 5e75d5c263b546768c6b3aff83a02a4e
msgid ""
"`.NET Core, UWP and C# <https://github.com/esteve/ros2_dotnet>`__ This is"
" a collection of projects (bindings, code generator, examples and more) "
"for writing ROS 2 applications for .NET Core and .NET Standard."
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:79
#: 8b50bd1220d84b9b8eaf2865000c55df
msgid ""
"`Node.js <https://www.npmjs.com/package/rclnodejs>`__ rclnodejs is a "
"Node.js client for ROS 2. It provides a simple and easy JavaScript API "
"for ROS 2 programming."
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:80
#: 535b9d66a22c42a1a2b0862e10eae220
msgid ""
"`Rust <https://github.com/ros2-rust/ros2_rust>`__ This is a set of "
"projects (the rclrs client library, code generator, examples and more) "
"that enables developers to write ROS 2 applications in Rust."
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:82
#: 8730e3d22b2d4d49a7fdadf5685bffa1
msgid "Older, unmaintained client libraries are:"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:84
#: a3841f88932c4393ba1dacb7c5555b96
msgid "`Ada <https://github.com/ada-ros/ada4ros2>`__"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:85
#: 0bb01b65b6da47428317e911115ac960
msgid "`C# <https://github.com/firesurfer/rclcs>`__"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:86
#: 01c43b91534f43859a88edfb6e83a119
msgid "`Objective C and iOS <https://github.com/esteve/ros2_objc>`__"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:87
#: fd9df509e46d4801ac7379144f940453
msgid "`Zig <https://github.com/jacobperron/rclzig>`__"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:91
#: cd11bacaa760459c8e7afc8a81ff0b11
msgid "Common functionality: ``rcl``"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:93
#: abbd832f07794bcaa3e02d535ded66d3
msgid ""
"Most of the functionality found in a client library is not specific to "
"the programming language of the client library. For example, the behavior"
" of parameters and the logic of namespaces should ideally be the same "
"across all programming languages. Because of this, rather than "
"implementing the common functionality from scratch, client libraries make"
" use of a common core ROS Client Library (RCL) interface that implements "
"logic and behavior of ROS concepts that is not language-specific. As a "
"result, client libraries only need to wrap the common functionality in "
"the RCL with foreign function interfaces. This keeps client libraries "
"thinner and easier to develop. For this reason the common RCL "
"functionality is exposed with C interfaces as the C language is typically"
" the easiest language for client libraries to wrap."
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:100
#: 1510834ae0484912a1fbaaf1f7f2b4ce
msgid ""
"In addition to making the client libraries light-weight, an advantage of "
"having the common core is that the behavior between languages is more "
"consistent. If any changes are made to the logic/behavior of the "
"functionality in the core RCL -- namespaces, for example -- all client "
"libraries that use the RCL will have these changes reflected. "
"Furthermore, having the common core means that maintaining multiple "
"client libraries becomes less work when it comes to bug fixes."
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:104
#: f3ceec7a5dc04616b73574985e7cc8b1
msgid ""
"The API documentation for ``rcl`` can be found `here "
"<https://docs.ros.org/en/rolling/p/rcl/>`__."
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:107
#: a40c79c8a5304b69b4ec205c05168f98
msgid "Language-specific functionality"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:109
#: d881ac35bb194503936fa59fad96ab87
msgid ""
"Client library concepts that require language-specific "
"features/properties are not implemented in the RCL but instead are "
"implemented in each client library. For example, threading models used by"
" “spin” functions will have implementations that are specific to the "
"language of the client library."
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:113
#: 899633d1ac9c4201acf2e98826c39fd8
msgid "Demo"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:115
#: 7578c30a5b4142fa962ae7244b1a857d
#, python-format
msgid ""
"For a walkthrough of the message exchange between a publisher using "
"``rclpy`` and a subscription using ``rclcpp``\\ , we encourage you to "
"watch `this ROSCon talk <https://vimeo.com/187696091>`__ starting at "
"17:25 (`see the slides here "
"<https://roscon.ros.org/2016/presentations/ROSCon%202016%20-%20ROS%202%20Update.pdf>`__)."
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:118
#: 31b3da67a2c34874ac1742065c62b78b
msgid "Comparison to ROS 1"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:120
#: a5f9147e26a3409dae9d4545f6731759
msgid ""
"In ROS 1, all client libraries are developed \"from the ground up\". This"
" allows for the ROS 1 Python client library to be implemented purely in "
"Python, for example, which brings benefits of such as not needing to "
"compile code. However, naming conventions and behaviors are not always "
"consistent between client libraries, bug fixes have to be done in "
"multiple places, and there is a lot of functionality that has only ever "
"been implemented in one client library (e.g. UDPROS)."
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:125
#: b6c1fee31fee4112bef8678b32708870
msgid "Summary"
msgstr ""

#: ../../source/Concepts/Basic/About-Client-Libraries.rst:127
#: 4f21beaba0b448cea1a951b1051d435b
msgid ""
"By utilizing the common core ROS client library, client libraries written"
" in a variety of programming languages are easier to write and have more "
"consistent behavior."
msgstr ""

