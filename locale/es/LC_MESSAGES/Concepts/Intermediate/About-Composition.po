# Archivo de traducción al español para la documentación de ROS 2.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# Cristian Chitiva <cychitivav@unal.edu.co>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-19 11:55+0000\n"
"Language-Team: es <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/Concepts/Intermediate/About-Composition.rst:6
#: 13468b9f73064aa8991c51edd9c7abb6
msgid "Composition"
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:9
#: 92ac976ff0554ee8a128cf2f4c08b6a2
msgid "Table of Contents"
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:12
#: a004deece365419196a51ab03b345dd3
msgid "ROS 1 - Nodes vs. Nodelets"
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:14
#: 039fc8bb3c084ac7b57bdc458f25b701
msgid ""
"In ROS 1 you can write your code either as a `ROS node "
"<https://wiki.ros.org/Nodes>`__ or as a `ROS nodelet "
"<https://wiki.ros.org/nodelet>`__. ROS 1 nodes are compiled into "
"executables. ROS 1 nodelets on the other hand are compiled into a shared "
"library which is then loaded at runtime by a container process."
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:19
#: e788d7157c384350bd45fe6ae427768f
msgid "ROS 2 - Unified API"
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:21
#: 1e8a45eab797422ba5c6de5603d86abe
msgid ""
"In ROS 2 the recommended way of writing your code is similar to a nodelet"
" - we call it a ``Component``. This makes it easy to add common concepts "
"to existing code, like a `life cycle "
"<https://design.ros2.org/articles/node_lifecycle.html>`__. Having "
"different APIs, which was the biggest drawback in ROS 1, is avoided in "
"ROS 2 since both approaches use the same API."
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:27
#: 5c1e602404cc465d9dfbdb13ab336ef1
msgid ""
"It is still possible to use the node-like style of \"writing your own "
"main\" but for the common case it is not recommended."
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:29
#: 3da37eba3d5c4585aa03078191ed190e
msgid ""
"By making the process layout a deploy-time decision the user can choose "
"between:"
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:31
#: 4cf372c9f0614cbfb95e70c6cc8bc6c1
msgid ""
"running multiple nodes in separate processes with the benefits of "
"process/fault isolation as well as easier debugging of individual nodes "
"and"
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:32
#: 80ef31af1e0444bcbd40db2f974bda3b
msgid ""
"running multiple nodes in a single process with the lower overhead and "
"optionally more efficient communication (see :doc:`Intra Process "
"Communication <../../Tutorials/Demos/Intra-Process-Communication>`)."
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:34
#: 22eb9c9774c3407e9048587f43f44943
msgid ""
"Additionally ``ros2 launch`` can be used to automate these actions "
"through specialized launch actions."
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:37
#: 486ffe71a0eb4b7bbb964cb0b4800228
msgid "Writing a Component"
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:39
#: a459bd881b1a43489777c865282e3538
msgid ""
"Since a component is only built into a shared library, it doesn't have a "
"``main`` function (see `Talker source code "
"<https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/composition/src/talker_component.cpp>`__)."
" A component is commonly a subclass of ``rclcpp::Node``. Since it is not "
"in control of the thread, it shouldn't perform any long running or "
"blocking tasks in its constructor. Instead, it can use timers to get "
"periodic notifications. Additionally, it can create publishers, "
"subscriptions, servers, and clients."
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:45
#: ccaef3abe68a4282b1176489b6e7adc5
msgid ""
"An important aspect of making such a class a component is that the class "
"registers itself using macros from the package ``rclcpp_components`` (see"
" the last line in the source code). This makes the component discoverable"
" when its library is being loaded into a running process - it acts as "
"kind of an entry point."
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:48
#: 38f5c70a65a04acda6d53e11561d7d43
msgid ""
"Additionally, once a component is created, it must be registered with the"
" index to be discoverable by the tooling."
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:59
#: 52667b7486b6487eb9d96b0538580b23
msgid ""
"In order for the component_container to be able to find desired "
"components, it must be executed or launched from a shell that has sourced"
" the corresponding workspace."
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:62
#: dc018847caa847a29097c61ce3da1860
msgid "Using Components"
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:64
#: 07399a05b814408883c9ec0bf3a183c7
msgid ""
"The `composition "
"<https://github.com/ros2/demos/tree/{REPOS_FILE_BRANCH}/composition>`__ "
"package contains a couple of different approaches on how to use "
"components. The three most common ones are:"
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:67
#: 52e1a3080fb44e3b9c113330327a07fd
msgid ""
"Start a (`generic container process "
"<https://github.com/ros2/rclcpp/blob/{REPOS_FILE_BRANCH}/rclcpp_components/src/component_container.cpp>`__)"
" and call the ROS service `load_node "
"<https://github.com/ros2/rcl_interfaces/blob/{REPOS_FILE_BRANCH}/composition_interfaces/srv/LoadNode.srv>`__"
" offered by the container. The ROS service will then load the component "
"specified by the passed package name and library name and start executing"
" it within the running process. Instead of calling the ROS service "
"programmatically you can also use a `command line tool "
"<https://github.com/ros2/ros2cli/tree/{REPOS_FILE_BRANCH}/ros2component>`__"
" to invoke the ROS service with the passed command line arguments"
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:70
#: 5a0d133fb3964a0ab8efeae75f4e9d00
msgid ""
"Create a `custom executable "
"<https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/composition/src/manual_composition.cpp>`__"
" containing multiple nodes which are known at compile time. This approach"
" requires that each component has a header file (which is not strictly "
"needed for the first case)."
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:72
#: 43b5cd8e78a8497d9b0bc5ef2ec4e8b8
msgid ""
"Create a launch file and use ``ros2 launch`` to create a container "
"process with multiple components loaded."
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:75
#: 6841f274246145fb9f4fedb0c33e9d17
msgid "Practical application"
msgstr ""

#: ../../source/Concepts/Intermediate/About-Composition.rst:77
#: 4c64e9fbd3884d31b002afad46187a6f
msgid ""
"Try the :doc:`Composition demos "
"<../../Tutorials/Intermediate/Composition>`."
msgstr ""

#~ msgid ""
#~ "Since a component is only built "
#~ "into a shared library, it doesn't "
#~ "have a ``main`` function (see `Talker"
#~ " source code "
#~ "<https://github.com/ros2/demos/blob/rolling/composition/src/talker_component.cpp>`__)."
#~ " A component is commonly a subclass"
#~ " of ``rclcpp::Node``. Since it is not"
#~ " in control of the thread, it "
#~ "shouldn't perform any long running or"
#~ " blocking tasks in its constructor. "
#~ "Instead, it can use timers to get"
#~ " periodic notifications. Additionally, it "
#~ "can create publishers, subscriptions, servers,"
#~ " and clients."
#~ msgstr ""

#~ msgid ""
#~ "The `composition "
#~ "<https://github.com/ros2/demos/tree/rolling/composition>`__ "
#~ "package contains a couple of different"
#~ " approaches on how to use components."
#~ " The three most common ones are:"
#~ msgstr ""

#~ msgid ""
#~ "Start a (`generic container process "
#~ "<https://github.com/ros2/rclcpp/blob/rolling/rclcpp_components/src/component_container.cpp>`__)"
#~ " and call the ROS service `load_node"
#~ " "
#~ "<https://github.com/ros2/rcl_interfaces/blob/rolling/composition_interfaces/srv/LoadNode.srv>`__"
#~ " offered by the container. The ROS"
#~ " service will then load the component"
#~ " specified by the passed package name"
#~ " and library name and start executing"
#~ " it within the running process. "
#~ "Instead of calling the ROS service "
#~ "programmatically you can also use a "
#~ "`command line tool "
#~ "<https://github.com/ros2/ros2cli/tree/rolling/ros2component>`__ "
#~ "to invoke the ROS service with the"
#~ " passed command line arguments"
#~ msgstr ""

#~ msgid ""
#~ "Create a `custom executable "
#~ "<https://github.com/ros2/demos/blob/rolling/composition/src/manual_composition.cpp>`__"
#~ " containing multiple nodes which are "
#~ "known at compile time. This approach "
#~ "requires that each component has a "
#~ "header file (which is not strictly "
#~ "needed for the first case)."
#~ msgstr ""

