# Archivo de traducción al español para la documentación de ROS 2.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# Cristian Chitiva <cychitivav@unal.edu.co>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-19 11:55+0000\n"
"Language-Team: es <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:7
#: 42182506af854cac97c4bc2d0d5902b0
msgid "Implementing a custom memory allocator"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:9
#: bee1ac4d77c64143b22e30ea9ebfa9bd
msgid ""
"**Goal:** This tutorial will show how to use a custom memory allocator "
"when writing ROS 2 C++ code."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:11
#: 3a9210fee9d345a39047b789367b3362
msgid "**Tutorial level:** Advanced"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:13
#: d2a5abda38804678bdea7c60b24046a2
msgid "**Time:** 20 minutes"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:17
#: 7704aaeb531c4be486401fba25ca2d7f
msgid "Table of Contents"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:19
#: 5f9bf6fcad9443378d5c554e6e0e2c91
msgid ""
"This tutorial will teach you how to integrate a custom allocator for "
"publishers and subscribers so that the default heap allocator is never "
"called while your ROS nodes are executing. The code for this tutorial is "
"available `here "
"<https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/demo_nodes_cpp/src/topics/allocator_tutorial.cpp>`__."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:23
#: 34508c41a2924fd0865f3b12a080b468
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:25
#: 48db789f809f49a8a0862d1816d2b303
msgid ""
"Suppose you want to write real-time safe code, and you've heard about the"
" many dangers of calling \"new\" during the real-time critical section, "
"because the default heap allocator on most platforms is nondeterministic."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:27
#: 3635fca17883457e863ef1dbf34f84d9
msgid ""
"By default, many C++ standard library structures will implicitly allocate"
" memory as they grow, such as ``std::vector``. However, these data "
"structures also accept an \"Allocator\" template argument. If you specify"
" a custom allocator to one of these data structures, it will use that "
"allocator for you instead of the system allocator to grow or shrink the "
"data structure. Your custom allocator could have a pool of memory "
"preallocated on the stack, which might be better suited to real-time "
"applications."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:29
#: 66cd76f977eb4957b9ffef4b9dc7f1b0
msgid ""
"In the ROS 2 C++ client library (rclcpp), we are following a similar "
"philosophy to the C++ standard library. Publishers, subscribers, and the "
"Executor accept an Allocator template parameter that controls allocations"
" made by that entity during execution."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:32
#: 56c4794838094b778ecdfd573f618ae1
msgid "Writing an allocator"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:34
#: 58dd4442561b49528ef72e5ab56c6414
msgid ""
"To write an allocator compatible with ROS 2's allocator interface, your "
"allocator must be compatible with the C++ standard library allocator "
"interface."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:36
#: 5fd60d202a984bf6b1d9a6250511bcd0
msgid ""
"The C++11 library provides something called ``allocator_traits``. The "
"C++11 standard specifies that a custom allocator only needs to fulfil a "
"minimal set of requirements to be used to allocate and deallocate memory "
"in a standard way. ``allocator_traits`` is a generic structure that fills"
" out other qualities of an allocator based on an allocator written with "
"the minimal requirements."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:38
#: 8e7bb8c55a4b4372b88d5e65ec7b4a2d
msgid ""
"For example, the following declaration for a custom allocator would "
"satisfy ``allocator_traits`` (of course, you would still need to "
"implement the declared functions in this struct):"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:57
#: 6c690f0ab8c0418b862ffd24f7519c8f
msgid ""
"You could then access other functions and members of the allocator filled"
" in by ``allocator_traits`` like so: "
"``std::allocator_traits<custom_allocator<T>>::construct(...)``"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:59
#: d80dfc240a094d5f8153ee59824b2f16
msgid ""
"To learn about the full capabilities of ``allocator_traits``, see "
"https://en.cppreference.com/w/cpp/memory/allocator_traits ."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:61
#: abacfa5217c84a90bfb260831331c37b
msgid ""
"However, some compilers that only have partial C++11 support, such as GCC"
" 4.8, still require allocators to implement a lot of boilerplate code to "
"work with standard library structures such as vectors and strings, "
"because these structures do not use ``allocator_traits`` internally. "
"Therefore, if you're using a compiler with partial C++11 support, your "
"allocator will need to look more like this:"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:111
#: aecac0ad50b14059b6291b61afdb5e98
msgid "Writing an example main"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:113
#: cc35d28d7a3f4a78acc14e9e3f9383bb
msgid ""
"Once you have written a valid C++ allocator, you must pass it as a shared"
" pointer to your publisher, subscriber, and executor."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:137
#: f8c22c3546d24229aa83d84eb08bfc50
msgid ""
"You will also need to use your allocator to allocate any messages that "
"you pass along the execution codepath."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:143
#: d8f618c30a574e1083a423464b23eb09
msgid ""
"Once you've instantiated the node and added the executor to the node, "
"it's time to spin:"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:157
#: 01a74ce14e934bac8b11c587fc68fd02
msgid "Passing an allocator to the intra-process pipeline"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:159
#: ac891c85a4354bea81ddc53a8a330177
msgid ""
"Even though we instantiated a publisher and subscriber in the same "
"process, we aren't using the intra-process pipeline yet."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:161
#: febc8b03ac3d4f1c86fecf45a8ab5126
msgid ""
"The IntraProcessManager is a class that is usually hidden from the user, "
"but in order to pass a custom allocator to it we need to expose it by "
"getting it from the rclcpp Context. The IntraProcessManager makes use of "
"several standard library structures, so without a custom allocator it "
"will call the default new."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:171
#: 7fa89d600c5e4631b4a5c1df4a453422
msgid ""
"Make sure to instantiate publishers and subscribers AFTER constructing "
"the node in this way."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:174
#: fdbbf9202cd04fd58ea7458ea3f12c75
msgid "Testing and verifying the code"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:176
#: 426aadcf3c4e48b8b6446fffec7356f3
msgid "How do you know that your custom allocator is actually getting called?"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:178
#: bc5c7e6029b74ec1a03118e1313413ea
msgid ""
"The obvious thing to do would be to count the calls made to your custom "
"allocator's ``allocate`` and ``deallocate`` functions and compare that to"
" the calls to ``new`` and ``delete``."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:180
#: 0a36247908eb4b248e057894e16a2da7
msgid "Adding counting to the custom allocator is easy:"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:196
#: cc278b32c6db4e6a9890f906fd4a3e56
msgid "You can also override the global new and delete operators:"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:220
#: f1ddd62ae46b417086c0f54c63723c62
msgid ""
"where the variables we are incrementing are just global static integers, "
"and ``is_running`` is a global static boolean that gets toggled right "
"before the call to ``spin``."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:222
#: 276c070598fd4aca911f3bb7434127df
msgid ""
"The `example executable "
"<https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/demo_nodes_cpp/src/topics/allocator_tutorial.cpp>`__"
" prints the value of the variables. To run the example executable, use:"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:228
#: 9c284a94bbec44818d5d5a3e97e61124
msgid "or, to run the example with the intra-process pipeline on:"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:234
#: 4b5414f8cd8e4abaa4362567ec8774e9
msgid "You should get numbers like:"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:243
#: ee54110cdcf240e693af504d4acd78af
msgid ""
"We've caught about 2/3 of the allocations/deallocations that happen on "
"the execution path, but where do the remaining 1/3 come from?"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:245
#: d3034c4fd7b440d9894fc510e6b673d2
msgid ""
"As a matter of fact, these allocations/deallocations originate in the "
"underlying DDS implementation used in this example."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:247
#: b37faa1357224ace83cd3d0981601296
msgid ""
"Proving this is out of the scope of this tutorial, but you can check out "
"the test for the allocation path that gets run as part of the ROS 2 "
"continuous integration testing, which backtraces through the code and "
"figures out whether certain function calls originate in the rmw "
"implementation or in a DDS implementation:"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:249
#: 22a749784e294fc59fdc1927ff7d4945
msgid "https://github.com/ros2/realtime_support/blob/{REPOS_FILE_BRANCH}/tlsf_cpp/test/test_tlsf.cpp#L41"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:251
#: 09ed666c80bc49559d9106a825b070b9
msgid ""
"Note that this test is not using the custom allocator we just created, "
"but the TLSF allocator (see below)."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:254
#: e664393a2fc64f13992826f8d124e5c0
msgid "The TLSF allocator"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:256
#: 5d76536730c8431f9a13cbb27291e0b5
msgid ""
"ROS 2 offers support for the TLSF (Two Level Segregate Fit) allocator, "
"which was designed to meet real-time requirements:"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:258
#: e46e4479780c4596a18a7e55cbad20d6
msgid "https://github.com/ros2/realtime_support/tree/{REPOS_FILE_BRANCH}/tlsf_cpp"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:260
#: 073e4ca338574caba19236f8e902db85
msgid "For more information about TLSF, see http://www.gii.upv.es/tlsf/"
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:262
#: ea677b29e343406ba0c4d6b804d0c269
msgid "Note that the TLSF allocator is licensed under a dual-GPL/LGPL license."
msgstr ""

#: ../../source/Tutorials/Advanced/Allocator-Template-Tutorial.rst:264
#: 89e20a4bb9c14b99bdf9f7951d8a75a5
msgid ""
"A full working example using the TLSF allocator is here: "
"https://github.com/ros2/realtime_support/blob/{REPOS_FILE_BRANCH}/tlsf_cpp/example/allocator_example.cpp"
msgstr ""

#~ msgid ""
#~ "This tutorial will teach you how "
#~ "to integrate a custom allocator for "
#~ "publishers and subscribers so that the"
#~ " default heap allocator is never "
#~ "called while your ROS nodes are "
#~ "executing. The code for this tutorial"
#~ " is available `here "
#~ "<https://github.com/ros2/demos/blob/rolling/demo_nodes_cpp/src/topics/allocator_tutorial.cpp>`__."
#~ msgstr ""

#~ msgid ""
#~ "The `example executable "
#~ "<https://github.com/ros2/demos/blob/rolling/demo_nodes_cpp/src/topics/allocator_tutorial.cpp>`__"
#~ " prints the value of the variables."
#~ " To run the example executable, use:"
#~ msgstr ""

#~ msgid "https://github.com/ros2/realtime_support/blob/rolling/tlsf_cpp/test/test_tlsf.cpp#L41"
#~ msgstr ""

#~ msgid "https://github.com/ros2/realtime_support/tree/rolling/tlsf_cpp"
#~ msgstr ""

#~ msgid ""
#~ "A full working example using the "
#~ "TLSF allocator is here: "
#~ "https://github.com/ros2/realtime_support/blob/rolling/tlsf_cpp/example/allocator_example.cpp"
#~ msgstr ""

