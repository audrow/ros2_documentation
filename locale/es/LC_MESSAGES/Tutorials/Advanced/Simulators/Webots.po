# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-21 15:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:8
msgid "Setting up a robot simulation (Webots)"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:10
msgid "**Goal:** Setup a robot simulation and control it from ROS 2."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:12
msgid "**Tutorial level:** Advanced"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:14
msgid "**Time:** 20 minutes"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:18
msgid "Contents"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:21
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:23
msgid ""
"Several robot simulators can be used with ROS 2, such as Gazebo, Webots, "
"etc. Unlike turtlesim, they provide fairly realistic results relying on "
"physics-based models for robots, sensors, actuators and objects. Hence, "
"what you observe in simulation is very close to what you will get when "
"transferring your ROS 2 controllers to a real robot. In this tutorial, "
"you are going to use the Webots robot simulator to set-up and run a very "
"simple ROS 2 simulation scenario."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:28
msgid ""
"The ``webots_ros2`` package provides an interface between ROS 2 and "
"Webots. It includes several sub-packages, but in this tutorial, you are "
"going to use only the ``webots_ros2_driver`` sub-package to implement a "
"Python plugin controlling a simulated robot. Some other sub-packages "
"contain demos with different robots such as the TurtleBot3. They are "
"documented in the :doc:`../../Demos` page."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:34
msgid "Prerequisites"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:36
msgid ""
"It is recommended to understand basic ROS principles covered in the "
"beginner :doc:`../../../Tutorials`. In particular, :doc:`../../Beginner-"
"CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim`, :doc"
":`../../Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-"
"ROS2-Topics`, :doc:`../../Beginner-Client-"
"Libraries/Creating-A-Workspace/Creating-A-Workspace`, :doc"
":`../../Beginner-Client-Libraries/Creating-Your-First-ROS2-Package` and "
":doc:`../../Intermediate/Launch/Creating-Launch-Files` are useful "
"prerequisites."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:41
#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:211
#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:265
#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:410
msgid "Linux"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:43
msgid ""
"The Linux and ROS commands of this tutorial can be run in a standard "
"Linux terminal. See the `Webots ROS 2 Linux installation instructions "
"<https://github.com/cyberbotics/webots_ros2/wiki/Linux-Installation-"
"Guide>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:46
#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:215
#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:278
#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:420
msgid "Windows"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:48
msgid ""
"The Linux and ROS commands of this tutorial must be run in a WSL (Windows"
" Subsystem for Linux) environment. See the `Webots ROS 2 Windows "
"installation instructions "
"<https://github.com/cyberbotics/webots_ros2/wiki/Windows-Installation-"
"Guide>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:51
#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:219
#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:294
#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:433
msgid "macOS"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:53
msgid ""
"The Linux and ROS commands of this tutorial must be run in a pre-"
"configured Linux Virtual Machine (VM). See the `Webots ROS 2 macOS "
"installation instructions "
"<https://github.com/cyberbotics/webots_ros2/wiki/macOS-Installation-"
"Guide>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:56
msgid ""
"To install ``webots_ros2_driver`` from a terminal, proceed with the "
"following commands."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:66
msgid ""
"If you want to install the whole ``webots_ros2`` package, follow these "
"`instructions <https://github.com/cyberbotics/webots_ros2/wiki/Getting-"
"Started>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:69
msgid "Tasks"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:72
msgid "1 Create the package structure"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:74
msgid ""
"Let's organize the code in a custom ROS 2 package. Create a new package "
"named ``my_package`` from the ``src`` folder of your ROS 2 workspace. "
"Change the current directory of your terminal to ``ros2_ws/src`` and run:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:82
msgid ""
"The ``--node-name my_robot_driver`` option will create a "
"``my_robot_driver.py`` template Python plugin in the ``my_package`` "
"subfolder that you will modify later. The ``--dependencies rclpy "
"geometry_msgs webots_ros2_driver`` option specifies the packages needed "
"by the ``my_robot_driver.py`` plugin in the ``package.xml`` file. Let's "
"add a ``launch`` and a ``worlds`` folder inside the ``my_package`` "
"folder."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:92
msgid "You should end up with the following folder structure:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:114
msgid "2 Setup the simulation world"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:116
msgid ""
"You will need a world file containing a robot to launch your simulation. "
":download:`Download this world file <Code/my_world.wbt>` and move it "
"inside ``my_package/worlds/``."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:119
msgid ""
"This is actually a fairly simple text file you can visualize in a text "
"editor. A simple robot is already included in this ``my_world.wbt`` world"
" file."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:124
msgid ""
"In case you want to learn how to create your own robot model in Webots, "
"you can check this `tutorial "
"<https://github.com/cyberbotics/webots_ros2/wiki/Tutorial-Create-Webots-"
"Robot>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:127
msgid "3 Change the my_robot_driver.py file"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:129
msgid ""
"The ``webots_ros2_driver`` sub-package automatically creates a ROS 2 "
"interface for most sensors. In this task, you will extend this interface "
"by changing the ``my_robot_driver.py`` file."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:134
msgid ""
"The purpose of this tutorial is to show a basic example with a minimum "
"number of dependencies. However, you could avoid the use of this Python "
"plugin by using another ``webots_ros2`` sub-package named "
"``webots_ros2_control``, introducing a new dependency. This other sub-"
"package creates an interface with the ``ros2_control`` package that "
"facilitates the control of a differential wheeled robot."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:138
msgid ""
"Open ``my_package/my_package/my_robot_driver.py`` in your favorite editor"
" and replace its contents with the following:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:143
msgid "As you can see, the ``MyRobotDriver`` class implements three methods."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:145
msgid ""
"The first method, named ``init(self, ...)``, is actually the ROS node "
"counterpart of the Python ``__init__(self, ...)`` constructor. It first "
"gets the robot instance from the simulation (which can be used to access "
"the `Webots robot API <https://cyberbotics.com/doc/reference/robot?tab-"
"language=python>`_). Then, it gets the two motor instances and "
"initializes them with a target position and a target velocity. Finally a "
"ROS node is created and a callback method is registered for a ROS topic "
"named ``/cmd_vel`` that will handle ``Twist`` messages."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:155
msgid ""
"Then comes the implementation of the ``__cmd_vel_callback(self, twist)`` "
"callback private method that will be called for each ``Twist`` message "
"received on the ``/cmd_vel`` topic and will save it in the "
"``self.__target_twist`` member variable."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:162
msgid ""
"Finally, the ``step(self)`` method is called at every time step of the "
"simulation. The call to ``rclpy.spin_once()`` is needed to keep the ROS "
"node running smoothly. At each time step, the method will retrieve the "
"desired ``forward_speed`` and ``angular_speed`` from "
"``self.__target_twist``. As the motors are controlled with angular "
"velocities, the method will then convert the ``forward_speed`` and "
"``angular_speed`` into individual commands for each wheel. This "
"conversion depends on the structure of the robot, more specifically on "
"the radius of the wheel and the distance between them."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:174
msgid "4 Create the my_robot.urdf file"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:176
msgid ""
"You now have to create a URDF file to declare the ``my_robot_driver.py`` "
"Python plugin. This will allow the ``webots_ros2_driver`` ROS node to "
"launch the plugin."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:179
msgid ""
"In the ``my_package/resource`` folder create a text file named "
"``my_robot.urdf`` with this contents:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:186
msgid ""
"This simple URDF file doesn't contain any link or joint information about"
" the robot as it is not needed in this tutorial. However, URDF files "
"usually contain much more information as explained in the "
":doc:`../../Intermediate/URDF/URDF-Main`."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:190
msgid "5 Create the launch file"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:192
msgid ""
"Let's create now the launch file to easily launch the simulation and the "
"ROS controller with a single command. In the ``my_package/launch`` folder"
" create a new text file named ``robot_launch.py`` with this code:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:198
msgid ""
"The ``WebotsLauncher`` object is a custom action that allows you to start"
" a Webots simulation instance. You have to specify in the constructor "
"which world file the simulator will open."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:206
msgid ""
"Then, the ROS node interacting with the simulated robot is created. This "
"node, named ``driver``, is located in the ``webots_ros2_driver`` package."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:213
msgid ""
"The node will be able to communicate with the simulated robot by using a "
"custom protocol based on IPC and shared memory."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:217
msgid ""
"The node (in WSL) will be able to communicate with the simulated robot "
"(in Webots on native Windows) through a TCP connection."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:221
msgid ""
"The node (in the docker container) will be able to communicate with the "
"simulated robot (in Webots on native macOS) through a TCP connection."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:224
msgid ""
"In your case, you need to run a single instance of this node, because you"
" have a single robot in the simulation. But if you had more robots in the"
" simulation, you would have to run one instance of this node per robot. "
"``WEBOTS_CONTROLLER_URL`` is used to define the name of the robot the "
"driver should connect to. The ``controller_url_prefix()`` method is "
"mandatory, as it allows ``webots_ros2_driver`` to add the correct "
"protocol prefix depending on your platform. The ``robot_description`` "
"parameter holds the contents of the URDF file which refers to the "
"``my_robot_driver.py`` Python plugin."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:235
msgid ""
"After that, the three nodes are set to be launched in the "
"``LaunchDescription`` constructor:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:242
msgid ""
"Finally, an optional part is added in order to shutdown all the nodes "
"once Webots terminates (e.g., when it gets closed from the graphical user"
" interface)."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:250
msgid "6 Modify the setup.py file"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:252
msgid ""
"Finally, before you can start the launch file, you have to modify the "
"``setup.py`` file to include the extra files you added. Open "
"``my_package/setup.py`` and replace its contents with:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:258
msgid ""
"This sets-up the package and adds in the ``data_files`` variable the "
"newly added files: ``my_world.wbt``, ``my_robot.urdf`` and "
"``robot_launch.py``."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:261
msgid "7 Test the code"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:267
#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:412
msgid "From a terminal in your ROS 2 workspace run:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:275
#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:291
msgid ""
"This will launch the simulation. Webots will be automatically installed "
"on the first run in case it was not already installed."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:280
#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:422
msgid "From a terminal in your WSL ROS 2 workspace run:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:289
#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:431
msgid ""
"Be sure to use the ``/mnt`` prefix in front of your path to the Webots "
"installation folder to access the Windows file system from WSL."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:296
msgid ""
"On macOS, a local server must be started on the host to start Webots from"
" the Docker container. The local server can be downloaded `on the webots-"
"server repository <https://github.com/cyberbotics/webots-"
"server/blob/main/local_simulation_server.py>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:299
msgid ""
"In a terminal of the host machine (not in the VM), specify the Webots "
"installation folder (e.g. ``/Applications/Webots.app``) and start the "
"server using the following commands:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:306
msgid ""
"From a terminal in the Linux VM in your ROS 2 workspace, build and launch"
" your custom package with:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:317
msgid ""
"If you want to install Webots manually, you can download it `here "
"<https://github.com/cyberbotics/webots/releases/latest>`_."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:320
msgid "Then, open a second terminal and send a command with:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:326
msgid "The robot is now moving forward."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:330
msgid ""
"At this point, the robot is able to blindly follow your motor commands. "
"But it will eventually bump into the wall as you order it to move "
"forwards."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:335
msgid ""
"To prevent this, let's use the sensors of the robot to detect the "
"obstacles and avoid them. Close the Webots window, this should also "
"shutdown your ROS nodes started from the launcher. Close also the topic "
"command with ``Ctrl+C`` in the second terminal."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:340
msgid "8 Updating my_robot.urdf"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:342
msgid ""
"You have to modify the URDF file in order to enable the sensors. In "
"``my_robot.urdf`` replace the whole contents with:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:348
msgid ""
"The ROS 2 interface will parse the ``<device>`` tags referring to the "
"**DistanceSensor** nodes and use the standard parameters in the ``<ros>``"
" tags to enable the sensors and name their topics."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:351
msgid "9 Creating a ROS node to avoid obstacles"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:353
msgid ""
"The robot will use a standard ROS node to detect the wall and send motor "
"commands to avoid it. In the ``my_package/my_package/`` folder, create a "
"file named ``obstacle_avoider.py`` with this code:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:359
msgid ""
"This node will create a publisher for the command and subscribe to the "
"sensors topics here:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:366
msgid ""
"When a measurement is received from the left sensor it will be copied to "
"a member field:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:373
msgid ""
"Finally, a message will be sent to the ``/cmd_vel`` topic when a "
"measurement from the right sensor is received. The ``command_message`` "
"will register at least a forward speed in ``linear.x`` in order to make "
"the robot move when no obstacle is detected. If any of the two sensors "
"detect an obstacle, ``command_message`` will also register a rotational "
"speed in ``angular.z`` in order to make the robot turn right."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:383
msgid "10 Updating setup.py and robot_launch.py"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:385
msgid ""
"You have to modify these two other files to launch your new node. Edit "
"``setup.py`` and replace ``'console_scripts'`` with:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:393
msgid "This will add an entry point for the ``obstacle_avoider`` node."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:395
msgid ""
"Go to the file ``robot_launch.py`` and replace ``def "
"generate_launch_description():`` with:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:401
msgid ""
"This will create an ``obstacle_avoider`` node that will be included in "
"the ``LaunchDescription``."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:404
msgid "11 Test the obstacle avoidance code"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:406
msgid ""
"As in task ``7``, launch the simulation from a terminal in your ROS 2 "
"workspace:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:435
msgid ""
"In a terminal of the host machine (not in the VM), if not done already, "
"specify the Webots installation folder (e.g. "
"``/Applications/Webots.app``) and start the server using the following "
"commands:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:442
msgid ""
"Note that the server keeps running once the ROS 2 nodes are ended. You "
"don't need to restart it every time you want to launch a new simulation. "
"From a terminal in the Linux VM in your ROS 2 workspace, build and launch"
" your custom package with:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:453
msgid ""
"Your robot should go forward and before hitting the wall it should turn "
"clockwise. You can press ``Ctrl+F10`` in Webots or go to the ``View`` "
"menu, ``Optional Rendering`` and ``Show DistanceSensor Rays`` to display "
"the range of the distance sensors of the robot."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:459
msgid "Summary"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:461
msgid ""
"In this tutorial, you set-up a realistic robot simulation with Webots, "
"implemented a Python plugin to control the motors of the robot, and "
"implemented a ROS node using the sensors to avoid the obstacles."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:464
msgid "Next steps"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:466
msgid ""
"You might want to improve the plugin or create new nodes to change the "
"behavior of the robot. Taking inspiration from these previous tutorials "
"could be a starting point:"
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:469
msgid ":doc:`../Recording-A-Bag-From-Your-Own-Node-Py`."
msgstr ""

#: ../../source/Tutorials/Advanced/Simulators/Webots.rst:471
msgid ":doc:`../../Intermediate/Tf2/Tf2-Main`."
msgstr ""

