# Archivo de traducción al español para la documentación de ROS 2.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# Cristian Chitiva <cychitivav@unal.edu.co>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-19 11:55+0000\n"
"Language-Team: es <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:8
#: e69909d2fce5442d88e302a885b19580
msgid "Recording a bag from a node (Python)"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:10
#: 08b61001f3fb465a983756ef64b36115
msgid "**Goal:** Record data from your own Python node to a bag."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:12
#: 7a69f7f36d994d8783662cfacd116fd4
msgid "**Tutorial level:** Advanced"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:14
#: cce8bb4448ea4262a21085a4650d2d57
msgid "**Time:** 20 minutes"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:18
#: 1aa087f2eb134c66b22a2c6722c781f7
msgid "Contents"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:21
#: 2a9769dde121453eb785cc3299f9a0dd
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:23
#: bb58fc839e2343d7800b76e532408e4b
msgid ""
"``rosbag2`` doesn't just provide the ``ros2 bag`` command line tool. It "
"also provides a Python API for reading from and writing to a bag from "
"your own source code. This allows you to subscribe to a topic and save "
"the received data to a bag at the same time as performing any other "
"processing of your choice on that data. You may do this, for example, to "
"save data from a topic and the result of processing that data without "
"needing to send the processed data over a topic just to record it. "
"Because any data can be recorded in a bag, it is also possible to save "
"data generated by another source than a topic, such as synthetic data for"
" training sets. This is useful, for example, for quickly generating a bag"
" that contains a large number of samples spread over a long playback "
"time."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:31
#: fb414af6c58447b091f073cafa75956f
msgid "Prerequisites"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:33
#: ac94f3858e5d45d1b650f2fc909e25de
msgid ""
"You should have the ``rosbag2`` packages installed as part of your "
"regular ROS 2 setup."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:35
#: 7c4cfaee7689472894bd7ddc63cdf434
msgid ""
"If you've installed from Debian packages on Linux, it may be installed by"
" default. If it is not, you can install it using this command."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:42
#: 8780387c7cc84f33a7ef9713920f0842
msgid ""
"This tutorial discusses using ROS 2 bags, including from the terminal. "
"You should have already completed the :doc:`basic ROS 2 bag tutorial "
"<../Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-"
"Playing-Back-Data>`."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:46
#: a98854204d2046ac9a4f8b8a96d8c0d6
msgid "Tasks"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:49
#: 7aa7a81bbffd4af28f1c88ec4382ad3c
msgid "1 Create a package"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:51
#: 88fad484fe7c42a4b014e63573ac75f7
msgid ""
"Open a new terminal and :doc:`source your ROS 2 installation "
"<../Beginner-CLI-Tools/Configuring-ROS2-Environment>` so that ``ros2`` "
"commands will work."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:53
#: 6ca706c5f6bf48d2a51ab3734f213204
msgid ""
"Follow :ref:`these instructions <new-directory>` to create a new "
"workspace named ``ros2_ws``."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:55
#: b39b027a5b7e45a8aa38f1e3707b52ac
msgid "Navigate into the ``ros2_ws/src`` directory and create a new package:"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:61
#: 43c93ab033c947c2beb96876b099446a
msgid ""
"Your terminal will return a message verifying the creation of your "
"package ``bag_recorder_nodes_py`` and all its necessary files and "
"folders. The ``--dependencies`` argument will automatically add the "
"necessary dependency lines to the ``package.xml``. In this case, the "
"package will use the ``rosbag2_py`` package as well as the ``rclpy`` "
"package. A dependency on the ``example_interfaces`` package is also "
"required for message definitions."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:67
#: a8a08db8d7744f0598ed83cc006a784a
msgid "1.1 Update ``package.xml`` and ``setup.py``"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:69
#: 822065adc2624fbaaa920452c978f11d
msgid ""
"Because you used the ``--dependencies`` option during package creation, "
"you don't have to manually add dependencies to ``package.xml``. As "
"always, though, make sure to add the description, maintainer email and "
"name, and license information to ``package.xml``."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:78
#: 3453a8c1ff7f409abb93187b6ed08646
msgid "Also be sure to add this information to the ``setup.py`` file as well."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:88
#: 6c83b73910214121aaca311736abef30
msgid "2 Write the Python node"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:90
#: d1f0fa4f3bb74f03b2b2faae2c3c283f
msgid ""
"Inside the ``ros2_ws/src/bag_recorder_nodes_py/bag_recorder_nodes_py`` "
"directory, create a new file called ``simple_bag_recorder.py`` and paste "
"the following code into it."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:143
#: 0a4b0f3ded9241839832f7c694a41eb7
msgid "2.1 Examine the code"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:145
#: 9730e27c24254f82aab5839d9a60c738
msgid ""
"The ``import`` statements at the top are the package dependencies. Note "
"the importation of the ``rosbag2_py`` package for the functions and "
"structures necessary to work with bag files."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:148
#: b5ab315864a1487098c0640dcdb86c8e
msgid ""
"In the class constructor, we begin by creating the writer object that we "
"will use to write to the bag. We are creating a ``SequentialWriter``, "
"which writes messages into the bag in the order they are received. Other "
"writers with different behaviours may be available in `rosbag2 "
"<https://github.com/ros2/rosbag2/tree/{REPOS_FILE_BRANCH}/rosbag2_cpp/include/rosbag2_cpp/writers>`__."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:156
#: 30bc95e231db4bfb9a21cd62724afc9f
msgid ""
"Now that we have a writer object, we can open the bag using it. We "
"specify the URI of the bag to create and the format (``mcap``), leaving "
"other options at their defaults. The default conversion options are used,"
" which will perform no conversion and store the messages in the "
"serialization format they are received in."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:168
#: 14393beaa96f455a8b0f9800b91b8ad4
msgid ""
"Next, we need to tell the writer about the topics we wish to store. This "
"is done by creating a ``TopicMetadata`` object and registering it with "
"the writer. This object specifies the topic name, topic data type, and "
"serialization format used."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:180
#: 360ded245e604aeaa5181e0b9a1c0ff7
msgid ""
"With the writer now set up to record data we pass to it, we create a "
"subscription and specify a callback for it. We will write data to the bag"
" in the callback."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:192
#: 3f7bbc9b006d4d8dadc644f5d6d8937f
msgid ""
"The callback receives the message in unserialized form (as is standard "
"for the ``rclpy`` API) and passes the message to the writer, specifying "
"the topic that the data is for and the timestamp to record with the "
"message. However, the writer requires serialised messages to store in the"
" bag. This means that we need to serialise the data before passing it to "
"the writer. For this reason, we call ``serialize_message()`` and pass the"
" result of that to the writer, rather than passing in the message "
"directly."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:205
#: ed578baf3a4a4af582f80daf62b47bf3
msgid ""
"The file finishes with the ``main`` function used to create an instance "
"of the node and start ROS processing it."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:216
#: d5e997e9d6e14db4acee801b854da56e
msgid "2.2 Add entry point"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:218
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:417
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:574
#: 3d5649c38a144e10a0789c1d4306d4d7 8cc1f6450f6c4c3eabcadc3b58a5a2e4
#: 95680bc57aeb4e10a88c4d6cc74d8b86
msgid ""
"Open the ``setup.py`` file in the ``bag_recorder_nodes_py`` package and "
"add an entry point for your node."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:230
#: 2803c9ac81df4858b6b3126a9a69a24c
msgid "3 Build and run"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:232
#: 92e022063cc54ff781f068e5bba9ef17
msgid ""
"Navigate back to the root of your workspace, ``ros2_ws``, and build your "
"new package."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:236
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:258
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:435
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:457
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:593
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:615
#: 237a7f64e290497e9cc7dc372b0948a7 23d203b79273434493f48d686c19d819
#: 67741cc8914e4de88e042f8361ceeb5f a9fe5a4385f54622bc8e254430da858c
#: b71742855e4c4682b5ccbf7de8fa2637 fbb27b87d7b24a638d6e38082dd8f47c
msgid "Linux"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:242
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:264
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:441
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:463
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:599
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:621
#: 10e76a2ecf9e4778aa89dcd614cb3694 23772eddf53a445ea2a934f13d8a3f4a
#: 6dbde58aa35a439d83d66d3021eda296 7cb42114ab1247299fb4b478c0bfb75a
#: 9e6e72e1857b4800abb1f4b0b581441c 9ff95118473945fda68e3239e9b8084a
msgid "macOS"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:248
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:270
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:447
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:469
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:605
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:627
#: 0bb7570ea6764eb992fceca6e5ca156e 764b23c954424ac58ef39f8155004fac
#: 965d26fead624fed86c5596e591aa01d ae8e7a06b15f41f5ac87e93659c63f29
#: c7c6252e4a2b442a8d4ea1a1e32b639f d466685bd6e448729a43ca3b18e4c1c9
msgid "Windows"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:254
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:453
#: 288b374483184aa0a87e07e8eda0501f 55d390d0c70a4464b2f536ab2b1ee22f
msgid "Open a new terminal, navigate to ``ros2_ws``, and source the setup files."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:276
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:477
#: 4d8e9500e0e34931b1038b8f81008305 c03a2180eece40868fb040a661e4c5bd
msgid "Now run the node:"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:282
#: abf2ce4ad4f442139315987c60234903
msgid "Open a second terminal and run the ``talker`` example node."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:288
#: 5eba0e20e149451c867ef022d1aceed9
msgid ""
"This will start publishing data on the ``chatter`` topic. As the bag-"
"writing node receives this data, it will write it to the ``my_bag`` bag. "
"If the ``my_bag`` directory already exists, you must first delete it "
"before running the ``simple_bag_recorder`` node. This is because "
"``rosbag2`` will not overwrite existing bags by default, and so the "
"destination directory cannot exist."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:293
#: 4d9ec6405de449d0b296642c15b94bb7
msgid ""
"Terminate both nodes. Then, in one terminal start the ``listener`` "
"example node."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:300
#: e90323a3a1d541a0ade98e85cff6496a
msgid ""
"In the other terminal, use ``ros2 bag`` to play the bag recorded by your "
"node."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:306
#: 2739a0d29f364e64a8c3e5405ff7d4e1
msgid ""
"You will see the messages from the bag being received by the ``listener``"
" node."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:308
#: 9f0de674423a447bbb645deeba7c6eef
msgid ""
"If you wish to run the bag-writing node again, you will first need to "
"delete the ``my_bag`` directory."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:311
#: 1f3abafac44d4e8e9e6a77e8bcb26617
msgid "4 Record synthetic data from a node"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:313
#: 3b5db86a72b14331a00015b1ed64895c
msgid ""
"Any data can be recorded into a bag, not just data received over a topic."
" A common use case for writing to a bag from your own node is to generate"
" and store synthetic data. In this section you will learn how to write a "
"node that generates some data and stores it in a bag. We will demonstrate"
" two approaches for doing this. The first uses a node with a timer; this "
"is the approach that you would use if your data generation is external to"
" the node, such as reading data directly from hardware (e.g. a camera). "
"The second approach does not use a node; this is the approach you can use"
" when you do not need to use any functionality from the ROS "
"infrastructure."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:321
#: 0b3b7fb997314e23ad35e621c39073eb
msgid "4.1 Write a Python node"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:323
#: a786cb278c4742629044413b227e6380
msgid ""
"Inside the ``ros2_ws/src/bag_recorder_nodes_py/bag_recorder_nodes_py`` "
"directory, create a new file called ``data_generator_node.py`` and paste "
"the following code into it."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:374
#: b83c15320d914bcaaba6fb880f3909d5
msgid "4.2 Examine the code"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:376
#: 0788584cf48e4be9a752d25042b75554
msgid ""
"Much of this code is the same as the first example. The important "
"differences are described here."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:379
#: 227acde51e5e4ae08e0fa7c9c4a151a7
msgid "First, the name of the bag is changed."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:387
#: 9e06c406341e472abad247734165ecf7
msgid "The name of the topic is also changed, as is the data type stored."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:397
#: 5f6dfc46cc6c4dd8a70ba1125031ef01
msgid ""
"Rather than a subscription to a topic, this node has a timer. The timer "
"fires with a one-second period, and calls the given member function when "
"it does."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:404
#: 003ee1f369d147289621b2d1a2d1a7ec
msgid ""
"Within the timer callback, we generate (or otherwise obtain, e.g. read "
"from a serial port connected to some hardware) the data we wish to store "
"in the bag. As with the previous example, the data is not yet serialised,"
" so we must serialise it before passing it to the writer."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:415
#: 64b747d4542a447fa290d031b1d94ab9
msgid "4.3 Add executable"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:429
#: 929cc2faf4384583bd0e04dee0f6d037
msgid "4.4 Build and run"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:431
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:589
#: 75a3d24ce50e430b81096b50451cc887 908118c390d64832bf518de46a5f0d7b
msgid ""
"Navigate back to the root of your workspace, ``ros2_ws``, and build your "
"package."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:475
#: 0090c93e486f446c96e3c8c2fa0cc268
msgid ""
"If the ``timed_synthetic_bag`` directory already exists, you must first "
"delete it before running the node."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:483
#: 6385df50502844fd94bc7b9862b87fbf
msgid ""
"Wait for 30 seconds or so, then terminate the node with :kbd:`ctrl-c`. "
"Next, play back the created bag."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:490
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:649
#: 04bb4eead56247d1a71f1d90dab1d6e0 a2cf3f51a2bd473fbf4412d096e8e337
msgid "Open a second terminal and echo the ``/synthetic`` topic."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:496
#: 98ef865008dc47be8367261de04a817d
msgid ""
"You will see the data that was generated and stored in the bag printed to"
" the console at a rate of one message per second."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:499
#: 7e95d05362e04b1f8c6fb99746e995e4
msgid "5 Record synthetic data from an executable"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:501
#: 37e6372100ed40d6bb9fb14adc6db988
msgid ""
"Now that you can create a bag that stores data from a source other than a"
" topic, you will learn how to generate and record synthetic data from a "
"non-node executable. The advantage of this approach is simpler code and "
"rapid creation of a large quantity of data."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:505
#: 6287c4d9e77a498dbd3c8273bf1a33da
msgid "5.1 Write a Python executable"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:507
#: a4b32fde66f249e29d74878dbf3d2cf8
msgid ""
"Inside the ``ros2_ws/src/bag_recorder_nodes_py/bag_recorder_nodes_py`` "
"directory, create a new file called ``data_generator_executable.py`` and "
"paste the following code into it."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:548
#: e88e4dc3697540f39c152e21197c2ff7
msgid "5.2 Examine the code"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:550
#: 325a06a20f5a4920ac5de1ca0c309b06
msgid ""
"A comparison of this sample and the previous sample will reveal that they"
" are not that different. The only significant difference is the use of a "
"for loop to drive the data generation rather than a timer."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:553
#: f65642ebb9e243ba90c742ac2105b915
msgid ""
"Notice that we are also now generating time stamps for the data rather "
"than relying on the current system time for each sample. The time stamp "
"can be any value you need it to be. The data will be played back at the "
"rate given by these time stamps, so this is a useful way to control the "
"default playback speed of the samples. Notice also that while the gap "
"between each sample is a full second in time, this executable does not "
"need to wait a second between each sample. This allows us to generate a "
"lot of data covering a wide span of time in much less time than playback "
"will take."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:572
#: f3426108d8f748acaa3a41ca9d26c63b
msgid "5.3 Add executable"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:587
#: 28c467f3bc1640a68fd7bfb1a1aba71c
msgid "5.4 Build and run"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:611
#: dd44badae82f4dcdaa30850be8e568df
msgid "Open a terminal, navigate to ``ros2_ws``, and source the setup files."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:633
#: dc4a7d9d2fb04fa3beb843294f7c797b
msgid ""
"If the ``big_synthetic_bag`` directory already exists, you must first "
"delete it before running the executable."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:635
#: dfc127c7bd4d4fc185edd2d9e353ae79
msgid "Now run the executable:"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:641
#: 9750021d843c4a11bab52e6eb108d943
msgid "Note that the executable runs and finishes very quickly."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:643
#: a3c9546fbc084420af7afee4b10d9620
msgid "Now play back the created bag."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:655
#: d315b3a1f9f94cfe984f693440ce17c4
msgid ""
"You will see the data that was generated and stored in the bag printed to"
" the console at a rate of one message per second. Even though the bag was"
" generated rapidly it is still played back at the rate the time stamps "
"indicate."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:659
#: 3d7cd2a4d47c48929c62aae56334a387
msgid "Summary"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:661
#: 65a2642f9889403ab1a2e1dce938f96c
msgid ""
"You created a node that records data it receives on a topic into a bag. "
"You tested recording a bag using the node, and verified the data was "
"recorded by playing back the bag. This approach can be used to record a "
"bag with additional data than it received over a topic, for example with "
"results obtained from processing the received data. You then went on to "
"create a node and an executable to generate synthetic data and store it "
"in a bag. The latter approaches are useful especially for generating "
"synthetic data that can be used, for example, as training sets."
msgstr ""

#~ msgid ""
#~ "In the class constructor, we begin "
#~ "by creating the writer object that "
#~ "we will use to write to the "
#~ "bag. We are creating a "
#~ "``SequentialWriter``, which writes messages "
#~ "into the bag in the order they "
#~ "are received. Other writers with "
#~ "different behaviours may be available in"
#~ " `rosbag2 "
#~ "<https://github.com/ros2/rosbag2/tree/rolling/rosbag2_cpp/include/rosbag2_cpp/writers>`__."
#~ msgstr ""

