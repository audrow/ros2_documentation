# Archivo de traducción al español para la documentación de ROS 2.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# Cristian Chitiva <cychitivav@unal.edu.co>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-19 11:55+0000\n"
"Language-Team: es <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/Tutorials/Intermediate/Composition.rst:7
#: 226755d57c2943c6a9a2b0afafeedecb
msgid "Composing multiple nodes in a single process"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:11
#: 243f33e3f84641658bc1bd5ab2f6e46a
msgid "Table of Contents"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:13
#: f50697cafb624bc78de6743772d78535
msgid "**Goal:** Compose multiple nodes into a single process."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:15
#: f9a737854e6e4fdca25ed38a8fa90c95
msgid "**Tutorial level:** Intermediate"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:17
#: 69e97a237fd84041b3af4a0f6f56d825
msgid "**Time:** 20 minutes"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:20
#: 547f737c061e4f369d5d566b11e807b0
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:22
#: ff52c8a959494442b8273d800652a9b2
msgid ""
"See the :doc:`conceptual article <../../Concepts/Intermediate/About-"
"Composition>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:25
#: 5b7530fc47464ac882e24e1e9323e1f7
msgid "Run the demos"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:27
#: 7db89d20e46446b8910272ec207fff39
msgid ""
"The demos use executables from `rclcpp_components "
"<https://github.com/ros2/rclcpp/tree/{REPOS_FILE_BRANCH}/rclcpp_components>`__,"
" `ros2component "
"<https://github.com/ros2/ros2cli/tree/{REPOS_FILE_BRANCH}/ros2component>`__,"
" and  `composition "
"<https://github.com/ros2/demos/tree/{REPOS_FILE_BRANCH}/composition>`__ "
"packages, and can be run with the following commands."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:31
#: c81c9e6c658f46c9a252a1b06e7cd901
msgid "Discover available components"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:33
#: 35c64b94f19f449a8d9f0612dc3734f1
msgid ""
"To see what components are registered and available in the workspace, "
"execute the following in a shell:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:39
#: 5a83b2b85abe4f3cbdd102f711da9788
msgid "The terminal will return the list of all available components:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:54
#: a6d883127f5d448e99e14c1649cde68a
msgid "Run-time composition using ROS services with a publisher and subscriber"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:56
#: ../../source/Tutorials/Intermediate/Composition.rst:213
#: ../../source/Tutorials/Intermediate/Composition.rst:279
#: 38c854f51c4740439e5fc96ab41c190c 4c2dac77a78f4692bccc47c45437afde
#: 4dc802bfb4b64d70b4ca263273bcd39a
msgid "In the first shell, start the component container:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:62
#: bebb9941950e4af1bbbfec033212d01c
msgid ""
"Open the second shell and verify that the container is running via "
"``ros2`` command line tools:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:68
#: ../../source/Tutorials/Intermediate/Composition.rst:225
#: 9d2177f6a6354838bc69a501250ffa3f c13afb77db4a41ae9c6cf928f2d073f7
msgid "You should see a name of the component:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:74
#: 4afff780a4cf44aa91cd7dd8775afcd1
msgid ""
"In the second shell load the talker component (see `talker "
"<https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/composition/src/talker_component.cpp>`__"
" source code):"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:80
#: 069605e16d47494d980b233f86d0d79f
msgid ""
"The command will return the unique ID of the loaded component as well as "
"the node name:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:86
#: 03fe7de98b8f475a98aa6849d8441e02
msgid ""
"Now the first shell should show a message that the component was loaded "
"as well as repeated message for publishing a message."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:88
#: d1ed6547d9474a3ebbf5bf91976c427d
msgid ""
"Run another command in the second shell to load the listener component "
"(see `listener "
"<https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/composition/src/listener_component.cpp>`__"
" source code):"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:94
#: f5ccc228e92140e3b2ea74ef4fddc6f6
msgid "Terminal will return:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:100
#: 1e4da84857e84b57863a31bca8e75750
msgid ""
"The ``ros2`` command line utility can now be used to inspect the state of"
" the container:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:106
#: 9bb5c05f1788457180c63c7b42468f1c
msgid "You will see the following result:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:114
#: c11c5d6f96ea4f06ac5060d59e8ecab2
msgid "Now the first shell should show repeated output for each received message."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:117
#: aa44ccea59a84b1e9b17dad182edab5a
msgid "Run-time composition using ROS services with a server and client"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:119
#: a61f05591b6a41e68585774c786f112d
msgid "The example with a server and a client is very similar."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:121
#: 7f3f1c7d760c4345bba0f2564ad67fbb
msgid "In the first shell:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:127
#: 9acc90fb38ad4c159d98ed497da32dae
msgid ""
"In the second shell (see `server "
"<https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/composition/src/server_component.cpp>`__"
" and `client "
"<https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/composition/src/client_component.cpp>`__"
" source code):"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:134
#: daeb4f4c28804855ad794f0c2d263b15
msgid ""
"In this case the client sends a request to the server, the server "
"processes the request and replies with a response, and the client prints "
"the received response."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:137
#: ed91c57bd2c847299176ddb2dc6b95c1
msgid "Compile-time composition using ROS services"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:139
#: 848f582e5d604e6590d164acf65fee67
msgid ""
"This demos shows that the same shared libraries can be reused to compile "
"a single executable running multiple components. The executable contains "
"all four components from above: talker and listener as well as server and"
" client."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:142
#: f2d0bb57715042b0a6bd511814cbb8dc
msgid ""
"In the shell call (see `source code "
"<https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/composition/src/manual_composition.cpp>`__):"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:148
#: a06609e7bf7944d1be542a419f5ca9c3
msgid ""
"This should show repeated messages from both pairs, the talker and the "
"listener as well as the server and the client."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:152
#: 018ece06aea14d9ba9fba86df744f003
msgid ""
"Manually-composed components will not be reflected in the ``ros2 "
"component list`` command line tool output."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:155
#: d63ca33ffeb747598b58cacc77faa1ab
msgid "Run-time composition using dlopen"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:157
#: 0c84a2016a364683ae4943772b977250
msgid ""
"This demo presents an alternative to run-time composition by creating a "
"generic container process and explicitly passing the libraries to load "
"without using ROS interfaces. The process will open each library and "
"create one instance of each \"rclcpp::Node\" class in the library `source"
" code "
"<https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/composition/src/dlopen_composition.cpp>`__)."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:162
#: dda5dedfddb248388ea1f3d5e9f7f17e
msgid "Linux"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:168
#: a7c6b4d44f4046768d89580436c0f152
msgid "macOS"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:174
#: f0918cad521c4419bb1090addb8b3169
msgid "Windows"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:180
#: 48ded1959bbc4413b72134009554dca5
msgid "to get the path to where composition is installed. Then call"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:186
#: 1af325669e714d119ae3d4e488bb72d4
msgid ""
"Now the shell should show repeated output for each sent and received "
"message."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:190
#: debe0957a3914fff914511002d0a415c
msgid ""
"dlopen-composed components will not be reflected in the ``ros2 component "
"list`` command line tool output."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:194
#: 18afe900cd8944168d0281a6d44dac83
msgid "Composition using launch actions"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:196
#: 8d8a1279acef4160b1565900fce75291
msgid ""
"While the command line tools are useful for debugging and diagnosing "
"component configurations, it is frequently more convenient to start a set"
" of components at the same time. To automate this action, we can use a "
"`launch file "
"<https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/composition/launch/composition_demo_launch.py>`__:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:205
#: 629a70ab36c745a3a3ed3834361ba940
msgid "Advanced Topics"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:207
#: e56ffc564e9f490895041910b8f58d4c
msgid ""
"Now that we have seen the basic operation of components, we can discuss a"
" few more advanced topics."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:211
#: afc9b7090e1c43b2a3e15062a415e7da
msgid "Unloading components"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:219
#: d34470cd61204fd6bb621b0232209770
msgid "Verify that the container is running via ``ros2`` command line tools:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:231
#: 5a14cf8b7a3546f1a1d240a670a2d6ce
msgid "In the second shell load both the talker and listener as we have before:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:238
#: 9506116c0cc24c1cbb562591dc13747c
msgid "Use the unique ID to unload the node from the component container."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:244
#: 683d1a56f5954e03b4f1bcf654ecda56
msgid "The terminal should return:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:251
#: df9fdb5429034f038486637412aac387
msgid ""
"In the first shell, verify that the repeated messages from talker and "
"listener have stopped."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:255
#: 1a4521ce54e54551be7307028542d32f
msgid "Remapping container name and namespace"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:257
#: 3ae36b93f1884b94a43a4514fcc91c6a
msgid ""
"The component manager name and namespace can be remapped via standard "
"command line arguments:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:263
#: c39a7db7cc8b4489a683971c434e47e0
msgid ""
"In a second shell, components can be loaded by using the updated "
"container name:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:271
#: ../../source/Tutorials/Intermediate/Composition.rst:323
#: 15ee21b7f1ad479889f813304d8b0516 2931730b2d804783a19dcb60d0169288
msgid "Namespace remappings of the container do not affect loaded components."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:275
#: 156745b98d8149fc9a4912727f9e0c72
msgid "Remap component names and namespaces"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:277
#: c210b0763774495f8cab94550bd89360
msgid ""
"Component names and namespaces may be adjusted via arguments to the load "
"command."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:286
#: 264cd02f18954754a95fdd5f958fe850
msgid "Some examples of how to remap names and namespaces."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:288
#: aa6daf95a874410aab5b31bfd6b3de7e
msgid "Remap node name:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:294
#: 4b224ea4a1f14806b445b2bd4798d3db
msgid "Remap namespace:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:300
#: 3b5428d35aaf4542a2d7b416c9533b4a
msgid "Remap both:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:306
#: 007219fd1ba348ba933763e8964e304b
msgid "Now use ``ros2`` command line utility:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:312
#: 4f1fcdba346945ad8845b34948573fb3
msgid "In the console you should see corresponding entries:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:326
#: c3f802ff5550496a87cc13fb9b797b37
msgid "Passing parameter values into components"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:328
#: 1abff77081784d499614d96c714aebda
msgid ""
"The ``ros2 component load`` command-line supports passing arbitrary "
"parameters to the node as it is constructed. This functionality can be "
"used as follows:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:336
#: e9de51e558d941059248e2cf8507068c
msgid "Passing additional arguments into components"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:338
#: d30fb2da18fc44288066bfd9f299c2b1
msgid ""
"The ``ros2 component load`` command-line supports passing particular "
"options to the component manager for use when constructing the node. As "
"of now, the only command-line option that is supported is to instantiate "
"a node using intra-process communication. This functionality can be used "
"as follows:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:347
#: 072b8dfcea69450eb223f21677a465a2
msgid "Composable nodes as shared libraries"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:349
#: 4270af3ea4164789bb496a9af012e676
msgid ""
"If you want to export a composable node as a shared library from a "
"package and use that node in another package that does link-time "
"composition, add code to the CMake file which imports the actual targets "
"in downstream packages."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:351
#: 0d83b31cfd594198a444fcd36f5778e6
msgid "Then install the generated file and export the generated file."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:353
#: 662de4a06329469da24d8f65e678ffa8
msgid ""
"A practical example can be seen here: `ROS Discourse - Ament best "
"practice for sharing libraries <https://discourse.ros.org/t/ament-best-"
"practice-for-sharing-libraries/3602>`__"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:356
#: c5600584045f4eb38fa71924bf598a0d
msgid "Composing Non-Node Derived Components"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:358
#: ffbb638ab92540e6a4d7cf2c63e1e985
msgid ""
"In ROS 2, components allow for more efficient use of system resources and"
" provide a powerful feature that enables you to create reusable "
"functionality that is not tied to a specific node."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:360
#: 03528c98437e47288ce54f03c601d0bc
msgid ""
"One advantage of using components is that they allow you to create non-"
"node derived functionality as standalone executables or shared libraries "
"that can be loaded into the ROS system as needed."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:362
#: d66965ae4f25447e98d14371662d6b15
msgid ""
"To create a component that is not derived from a node, follow these "
"guidelines:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:364
#: 1f8b88b08a1b4eee91f5e47e9dacc977
msgid ""
"Implement a constructor that takes ``const rclcpp::NodeOptions&`` as its "
"argument."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:365
#: 5f899632d08348b39abf9fd08d8b3a98
msgid ""
"Implement the ``get_node_base_interface()`` method, which should return a"
" ``NodeBaseInterface::SharedPtr``. You can use the "
"``get_node_base_interface()`` method of a node that you create in your "
"constructor to provide this interface."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:367
#: edda2a8b8e154e8c9035a4cc0e1000fa
msgid ""
"Here's an example of a component that is not derived from a node, which "
"listens to a ROS topic: `node_like_listener_component "
"<https://github.com/ros2/demos/blob/{REPOS_FILE_BRANCH}/composition/src/node_like_listener_component.cpp>`__."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:369
#: cb0cf57706e540a2a5f5716e93b9aa53
msgid ""
"For more information on this topic, you can refer to this `discussion "
"<https://github.com/ros2/rclcpp/issues/2110#issuecomment-1454228192>`__."
msgstr ""

#~ msgid ""
#~ "The demos use executables from "
#~ "`rclcpp_components "
#~ "<https://github.com/ros2/rclcpp/tree/rolling/rclcpp_components>`__,"
#~ " `ros2component "
#~ "<https://github.com/ros2/ros2cli/tree/rolling/ros2component>`__, "
#~ "and  `composition "
#~ "<https://github.com/ros2/demos/tree/rolling/composition>`__ "
#~ "packages, and can be run with the"
#~ " following commands."
#~ msgstr ""

#~ msgid ""
#~ "In the second shell load the "
#~ "talker component (see `talker "
#~ "<https://github.com/ros2/demos/blob/rolling/composition/src/talker_component.cpp>`__"
#~ " source code):"
#~ msgstr ""

#~ msgid ""
#~ "Run another command in the second "
#~ "shell to load the listener component "
#~ "(see `listener "
#~ "<https://github.com/ros2/demos/blob/rolling/composition/src/listener_component.cpp>`__"
#~ " source code):"
#~ msgstr ""

#~ msgid ""
#~ "In the second shell (see `server "
#~ "<https://github.com/ros2/demos/blob/rolling/composition/src/server_component.cpp>`__"
#~ " and `client "
#~ "<https://github.com/ros2/demos/blob/rolling/composition/src/client_component.cpp>`__"
#~ " source code):"
#~ msgstr ""

#~ msgid ""
#~ "In the shell call (see `source "
#~ "code "
#~ "<https://github.com/ros2/demos/blob/rolling/composition/src/manual_composition.cpp>`__):"
#~ msgstr ""

#~ msgid ""
#~ "This demo presents an alternative to "
#~ "run-time composition by creating a "
#~ "generic container process and explicitly "
#~ "passing the libraries to load without"
#~ " using ROS interfaces. The process "
#~ "will open each library and create "
#~ "one instance of each \"rclcpp::Node\" "
#~ "class in the library `source code "
#~ "<https://github.com/ros2/demos/blob/rolling/composition/src/dlopen_composition.cpp>`__)."
#~ msgstr ""

#~ msgid ""
#~ "While the command line tools are "
#~ "useful for debugging and diagnosing "
#~ "component configurations, it is frequently "
#~ "more convenient to start a set of"
#~ " components at the same time. To "
#~ "automate this action, we can use a"
#~ " `launch file "
#~ "<https://github.com/ros2/demos/blob/rolling/composition/launch/composition_demo_launch.py>`__:"
#~ msgstr ""

#~ msgid ""
#~ "Here's an example of a component "
#~ "that is not derived from a node,"
#~ " which listens to a ROS topic: "
#~ "`node_like_listener_component "
#~ "<https://github.com/ros2/demos/blob/rolling/composition/src/node_like_listener_component.cpp>`__."
#~ msgstr ""

