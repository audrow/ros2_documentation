# Archivo de traducción al español para la documentación de ROS 2.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# Cristian Chitiva <cychitivav@unal.edu.co>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-19 11:55+0000\n"
"Language-Team: es <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:8
#: f0b8a7b1f784454d9cb676d483660541
msgid "Writing an action server and client (Python)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:10
#: 0a56609152ee4707ac8c4df00a741c89
msgid "**Goal:** Implement an action server and client in Python."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:12
#: ffc1ae746fe74b35ae907a0f80f79f54
msgid "**Tutorial level:** Intermediate"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:14
#: 8c6517e5c1a3459f9fd6d485b3fb1b0e
msgid "**Time:** 15 minutes"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:18
#: d4c6c94d38e145b3afb32d4c894af86c
msgid "Contents"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:21
#: 0274a354bc3347e4874d33324c56fddf
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:23
#: 62402a0347e94083a849f17f3b5f8d9f
msgid ""
"Actions are a form of asynchronous communication in ROS 2. *Action "
"clients* send goal requests to *action servers*. *Action servers* send "
"goal feedback and results to *action clients*."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:28
#: 8641d1788fcd46d9bf5155259394689f
msgid "Prerequisites"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:30
#: eec3114e32bd40a7b9bf2c6c7ecb2eab
msgid ""
"You will need the ``custom_action_interfaces`` package and the "
"``Fibonacci.action`` interface defined in the previous tutorial, :doc"
":`../Creating-an-Action`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:34
#: 41b503de76ba4cd194e52288ba734939
msgid "Tasks"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:37
#: 1baba6fdf4ac41e09345050a30e2ac46
msgid "1 Writing an action server"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:39
#: 2aa32e25274344f8ae6d114600a2d70e
msgid ""
"Let's focus on writing an action server that computes the Fibonacci "
"sequence using the action we created in the :doc:`../Creating-an-Action` "
"tutorial."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:42
#: 3bb91035813d47a4b6e945e31b79a5cd
msgid ""
"Until now, you've created packages and used ``ros2 run`` to run your "
"nodes. To keep things simple in this tutorial, however, we’ll scope the "
"action server to a single file. If you'd like to see what a complete "
"package for the actions tutorials looks like, check out `action_tutorials"
" "
"<https://github.com/ros2/demos/tree/{REPOS_FILE_BRANCH}/action_tutorials>`__."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:47
#: f314274f941743568f2c029574ed01ff
msgid ""
"Open a new file in your home directory, let's call it "
"``fibonacci_action_server.py``, and add the following code:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:53
#: afd20d70a4dd42b7aa2cbfb17f83ad3c
msgid ""
"Line 8 defines a class ``FibonacciActionServer`` that is a subclass of "
"``Node``. The class is initialized by calling the ``Node`` constructor, "
"naming our node ``fibonacci_action_server``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:60
#: e2f761c999fb4f62b248c7f87a4f864f
msgid "In the constructor we also instantiate a new action server:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:66
#: 3fdbcc4c730d4d74b8135248d70514b4
msgid "An action server requires four arguments:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:68
#: 396049d2bba14808b17721b048ec5035
msgid "A ROS 2 node to add the action client to: ``self``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:69
#: 7d027fbb97704cbfbefb3e000371cdc9
msgid "The type of the action: ``Fibonacci`` (imported in line 5)."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:70
#: f743c6867f4d44a1b892a8f4d77cca0c
msgid "The action name: ``'fibonacci'``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:71
#: f0ccede345e04db69053fe2f66004117
msgid ""
"A callback function for executing accepted goals: "
"``self.execute_callback``. This callback **must** return a result message"
" for the action type."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:74
#: 4cd9be2048cd479e9efdcd8cfa31b5ae
msgid "We also define an ``execute_callback`` method in our class:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:80
#: dcf7e5e43d9e4080823b933127198f19
msgid ""
"This is the method that will be called to execute a goal once it is "
"accepted."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:82
#: 0cc471b9f45e400fb71647bed1350181
msgid "Let's try running our action server:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:86
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:202
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:224
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:302
#: 02fa06732f964a9397ba4ed96261d709 3ff800c719da40cb975eef8e1e1682fa
#: c7901664b99a4338b4e47d1bbc8b76a5 fe42103c2334429e9a2672b8d3ef4d67
msgid "Linux"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:92
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:208
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:230
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:308
#: 288a1fb16a8e4f0c9401421f2ff7cb4d 9d9984fb6ada4829b90fdb5355db4a30
#: d7e15037f7a145378084cd2193dff402 f6ebe82f519d4841a8918fbc1e455747
msgid "macOS"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:98
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:214
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:236
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:314
#: 2eeb70f86dda4c779a78735a36fe518c 6ea72f62d068490bbbf8a4eed7f0cd13
#: 9e695d18ea7e403a8cce78284c6d2837 fe460eb3e8c04a30baa300f4a29de213
msgid "Windows"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:104
#: d1b1449e62f54828b75a5f64aa2af6de
msgid "In another terminal, we can use the command line interface to send a goal:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:110
#: 3f9f4ff4b4c14baaa19abbcdf1c59c4e
msgid ""
"In the terminal that is running the action server, you should see a "
"logged message \"Executing goal...\" followed by a warning that the goal "
"state was not set. By default, if the goal handle state is not set in the"
" execute callback it assumes the *aborted* state."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:113
#: 7eb2314211d4479c8472b6c3d93e133a
msgid ""
"We can use the method `succeed() "
"<http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.server.ServerGoalHandle.succeed>`_"
" on the goal handle to indicate that the goal was successful:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:120
#: f4bb40f1c54b49a89504698e2824a7ea
msgid ""
"Now if you restart the action server and send another goal, you should "
"see the goal finished with the status ``SUCCEEDED``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:122
#: 0760fb6d16a9469c8dfa3f5ba3874913
msgid ""
"Now let's make our goal execution actually compute and return the "
"requested Fibonacci sequence:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:129
#: 8a31da2e6c6e477f8e68cb28cf1b3a00
msgid ""
"After computing the sequence, we assign it to the result message field "
"before returning."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:131
#: 58a06b485e4b47db89c3992822456686
msgid ""
"Again, restart the action server and send another goal. You should see "
"the goal finish with the proper result sequence."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:135
#: a738e6059571448ab1bda558c1143fbb
msgid "1.2 Publishing feedback"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:137
#: a04881ea341344f8839b72251c71c9eb
msgid ""
"One of the nice things about actions is the ability to provide feedback "
"to an action client during goal execution. We can make our action server "
"publish feedback for action clients by calling the goal handle's "
"`publish_feedback() "
"<http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.server.ServerGoalHandle.publish_feedback>`_"
" method."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:140
#: 50fb495c0ec94c45bb7ada7808783d65
msgid ""
"We'll replace the ``sequence`` variable, and use a feedback message to "
"store the sequence instead. After every update of the feedback message in"
" the for-loop, we publish the feedback message and sleep for dramatic "
"effect:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:147
#: 62960a697376402c931778a4cbb16883
msgid ""
"After restarting the action server, we can confirm that feedback is now "
"published by using the command line tool with the ``--feedback`` option:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:154
#: a3ebeef787534b598e4ae9f95fca27a3
msgid "2 Writing an action client"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:156
#: b9fef5bef92a44bda07d823bc48952c2
msgid ""
"We'll also scope the action client to a single file. Open a new file, "
"let's call it ``fibonacci_action_client.py``, and add the following "
"boilerplate code:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:162
#: 525631cb2bbf471292540a3663afb069
msgid ""
"We've defined a class ``FibonacciActionClient`` that is a subclass of "
"``Node``. The class is initialized by calling the ``Node`` constructor, "
"naming our node ``fibonacci_action_client``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:169
#: ac310dcc86d643de88f03585933e5d8c
msgid ""
"Also in the class constructor, we create an action client using the "
"custom action definition from the previous tutorial on :doc:`../Creating-"
"an-Action`:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:175
#: 71830ff029b543449f36ae7efb34f711
msgid "We create an ``ActionClient`` by passing it three arguments:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:177
#: a4537dfda2e5440aa5798831fec33939
msgid "A ROS 2 node to add the action client to: ``self``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:178
#: f77887d6bd3b42afb4689798c24acbed
msgid "The type of the action: ``Fibonacci``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:179
#: acc583e864b041c5984d71caf16e8b8e
msgid "The action name: ``'fibonacci'``"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:181
#: 0ddb3aabb6aa4b5f889fb6afff4891b9
msgid ""
"Our action client will be able to communicate with action servers of the "
"same action name and type."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:183
#: 018173d0f66941e6b60a76172f033289
msgid ""
"We also define a method ``send_goal`` in the ``FibonacciActionClient`` "
"class:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:189
#: 8034f3401f434c34bf354e2f592055e6
msgid ""
"This method waits for the action server to be available, then sends a "
"goal to the server. It returns a future that we can later wait on."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:192
#: c9a94f56d819498c9c65a5496821d67c
msgid ""
"After the class definition, we define a function ``main()`` that "
"initializes ROS 2 and creates an instance of our "
"``FibonacciActionClient`` node. It then sends a goal and waits until that"
" goal has been completed."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:196
#: 11ed3c5ac8244e9c8691b37e3df926dc
msgid "Finally, we call ``main()`` in the entry point of our Python program."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:198
#: 37aef65259794de4a10c69e612ff3de0
msgid ""
"Let's test our action client by first running the action server built "
"earlier:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:220
#: 150d2a90b13d4002b27c67d5db4c7a51
msgid "In another terminal, run the action client:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:242
#: b3d66aae9e1f4373a6778424d64dda16
msgid ""
"You should see messages printed by the action server as it successfully "
"executes the goal:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:253
#: eb4b812286a640f193658b75037dae83
msgid ""
"The action client should start up, and then quickly finish. At this "
"point, we have a functioning action client, but we don't see any results "
"or get any feedback."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:257
#: 7ee302eb2b534982b9acbe412283f31a
msgid "2.1 Getting a result"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:259
#: 443b4e66bdb042868fbbec9786c1c27c
msgid ""
"So we can send a goal, but how do we know when it is completed? We can "
"get the result information with a couple steps. First, we need to get a "
"goal handle for the goal we sent. Then, we can use the goal handle to "
"request the result."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:264
#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:329
#: d478e7fef41c49a4817892ee12701469 f79af1fa57194e2fb862cac1be175a84
msgid "Here's the complete code for this example:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:269
#: 46b3d4c1d4fe42519f0a6de525882004
msgid ""
"The `ActionClient.send_goal_async() "
"<http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.client.ActionClient.send_goal_async>`_"
" method returns a future to a goal handle. First we register a callback "
"for when the future is complete:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:276
#: bb417b775a544b459c7bdd464b4babd5
msgid ""
"Note that the future is completed when an action server accepts or "
"rejects the goal request. Let's look at the ``goal_response_callback`` in"
" more detail. We can check to see if the goal was rejected and return "
"early since we know there will be no result:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:284
#: eb3217bc48f943eaa66d10e3e3b757dc
msgid ""
"Now that we've got a goal handle, we can use it to request the result "
"with the method `get_result_async() "
"<http://docs.ros2.org/latest/api/rclpy/api/actions.html#rclpy.action.client.ClientGoalHandle.get_result_async>`_."
" Similar to sending the goal, we will get a future that will complete "
"when the result is ready. Let's register a callback just like we did for "
"the goal response:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:292
#: d41ce74279484e0986f5cbf337f4a8cc
msgid ""
"In the callback, we log the result sequence and shutdown ROS 2 for a "
"clean exit:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:298
#: a763ab601371434f98f6234aa2fb27bc
msgid ""
"With an action server running in a separate terminal, go ahead and try "
"running our Fibonacci action client!"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:320
#: 2e78978e8b324e56a138da51381034bc
msgid ""
"You should see logged messages for the goal being accepted and the final "
"result."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:323
#: 8c962267428b4620b52ea43ad0a0f999
msgid "2.2 Getting feedback"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:325
#: 0488c1890a9e4142a655734903b88a6c
msgid ""
"Our action client can send goals. Nice! But it would be great if we could"
" get some feedback about the goals we send from the action server."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:334
#: a97c7c15b8624586a99c18d298b0f8ee
msgid "Here's the callback function for feedback messages:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:340
#: 68d542f83c654c278c8fb8c508b85df4
msgid ""
"In the callback we get the feedback portion of the message and print the "
"``partial_sequence`` field to the screen."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:342
#: e284433cf77f42e1af9e44935db429bb
msgid ""
"We need to register the callback with the action client. This is achieved"
" by additionally passing the callback to the action client when we send a"
" goal:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:349
#: 15b20572850847f79dda981cd909e1cf
msgid ""
"We're all set. If we run our action client, you should see feedback being"
" printed to the screen."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:352
#: 37c9a72649434a2e96e0a3f9f412300a
msgid "Summary"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:354
#: 0046c07e17934c728bcaa7c682cadb1a
msgid ""
"In this tutorial, you put together a Python action server and action "
"client line by line, and configured them to exchange goals, feedback, and"
" results."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:357
#: 530d69c32cad4dc7a470f293423292c2
msgid "Related content"
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:359
#: cb2dbd6d2adc4270aaf628d5aeafd1dd
msgid ""
"There are several ways you could write an action server and client in "
"Python; check out the ``minimal_action_server`` and "
"``minimal_action_client`` packages in the `ros2/examples "
"<https://github.com/ros2/examples/tree/{REPOS_FILE_BRANCH}/rclpy/actions>`_"
" repo."
msgstr ""

#: ../../source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst:361
#: b8dce217715842d4ab09d31d2d1f83b8
msgid ""
"For more detailed information about ROS actions, please refer to the "
"`design article <http://design.ros2.org/articles/actions.html>`__."
msgstr ""

#~ msgid ""
#~ "Until now, you've created packages and"
#~ " used ``ros2 run`` to run your "
#~ "nodes. To keep things simple in "
#~ "this tutorial, however, we’ll scope the"
#~ " action server to a single file. "
#~ "If you'd like to see what a "
#~ "complete package for the actions "
#~ "tutorials looks like, check out "
#~ "`action_tutorials "
#~ "<https://github.com/ros2/demos/tree/rolling/action_tutorials>`__."
#~ msgstr ""

#~ msgid ""
#~ "There are several ways you could "
#~ "write an action server and client "
#~ "in Python; check out the "
#~ "``minimal_action_server`` and ``minimal_action_client``"
#~ " packages in the `ros2/examples "
#~ "<https://github.com/ros2/examples/tree/rolling/rclpy/actions>`_ "
#~ "repo."
#~ msgstr ""

