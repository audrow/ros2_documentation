# Archivo de traducción al español para la documentación de ROS 2.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# Cristian Chitiva <cychitivav@unal.edu.co>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-19 11:55+0000\n"
"Language-Team: es <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:8
#: 2b552b7dd89743b99a2cb22282ed9738
msgid "Writing a simple service and client (Python)"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:10
#: 1464acd15fe1475faf886e5646baabf3
msgid "**Goal:** Create and run service and client nodes using Python."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:12
#: 737f0da330bc45eb800ac381873bf613
msgid "**Tutorial level:** Beginner"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:14
#: 246c9a2a622242c69b4ae0be0d728a51
msgid "**Time:** 20 minutes"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:18
#: 7357536858ae4aa5bd997ff3fc0262a1
msgid "Contents"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:21
#: cbc6265f27be4937a7e6459de5c7e6aa
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:23
#: c7f8ed71e1e445fc9dace407ecced0d9
msgid ""
"When :doc:`nodes <../Beginner-CLI-Tools/Understanding-ROS2-Nodes"
"/Understanding-ROS2-Nodes>` communicate using :doc:`services "
"<../Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-"
"ROS2-Services>`, the node that sends a request for data is called the "
"client node, and the one that responds to the request is the service "
"node. The structure of the request and response is determined by a "
"``.srv`` file."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:26
#: 1dd1901275d04caca4b5dc8ca7c7f276
msgid ""
"The example used here is a simple integer addition system; one node "
"requests the sum of two integers, and the other responds with the result."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:29
#: b82b55b27d9548dd826accb04bf6a1f9
msgid "Prerequisites"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:31
#: f7388fb8dd4d4610b800683305197316
msgid ""
"In previous tutorials, you learned how to :doc:`create a workspace "
"<./Creating-A-Workspace/Creating-A-Workspace>` and :doc:`create a package"
" <./Creating-Your-First-ROS2-Package>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:34
#: 2b5becd45fa34f099503695c819875e1
msgid "Tasks"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:37
#: 55fe37b93fcb49ec8d58cc902769ee8c
msgid "1 Create a package"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:39
#: 2eef23f305ac46e69488bab71f533ccb
msgid ""
"Open a new terminal and :doc:`source your ROS 2 installation "
"<../Beginner-CLI-Tools/Configuring-ROS2-Environment>` so that ``ros2`` "
"commands will work."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:41
#: 4f958edca3a84b69b159fc0a48ab2b98
msgid ""
"Navigate into the ``ros2_ws`` directory created in a :ref:`previous "
"tutorial <new-directory>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:43
#: d3f8012cf1ea4f24b94ff8ceba6e9d29
msgid ""
"Recall that packages should be created in the ``src`` directory, not the "
"root of the workspace. Navigate into ``ros2_ws/src`` and create a new "
"package:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:50
#: 75e4fa25cad64461a38555274a9f3a9d
msgid ""
"Your terminal will return a message verifying the creation of your "
"package ``py_srvcli`` and all its necessary files and folders."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:52
#: 78af5ed7a08f43e39aa38b5551152056
msgid ""
"The ``--dependencies`` argument will automatically add the necessary "
"dependency lines to ``package.xml``. ``example_interfaces`` is the "
"package that includes `the .srv file "
"<https://github.com/ros2/example_interfaces/blob/{REPOS_FILE_BRANCH}/srv/AddTwoInts.srv>`__"
" you will need to structure your requests and responses:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:62
#: dbc41c867ea9495a88a4b9838c47eee2
msgid ""
"The first two lines are the parameters of the request, and below the "
"dashes is the response."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:65
#: b078f508aebe46fe895f4bc8e7b36b4b
msgid "1.1 Update ``package.xml``"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:67
#: fd0bf8831d4a43c98ad933f6a4c9d742
msgid ""
"Because you used the ``--dependencies`` option during package creation, "
"you don't have to manually add dependencies to ``package.xml``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:69
#: a2efb2bb0e404e04b553cf3e7cf4c172
msgid ""
"As always, though, make sure to add the description, maintainer email and"
" name, and license information to ``package.xml``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:78
#: 6188ba3b0cf14c8d85472d84b7f22ea3
msgid "1.2 Update ``setup.py``"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:80
#: 1e65e05e58f14beca848d93693af9403
msgid ""
"Add the same information to the ``setup.py`` file for the ``maintainer``,"
" ``maintainer_email``, ``description`` and ``license`` fields:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:90
#: cb4ee7f87d894c25a77e5b11ecd1ba45
msgid "2 Write the service node"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:92
#: 34b11acd3195484390f11abd4728d027
msgid ""
"Inside the ``ros2_ws/src/py_srvcli/py_srvcli`` directory, create a new "
"file called ``service_member_function.py`` and paste the following code "
"within:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:129
#: 3a76c538484a40678f369733a953aeb5
msgid "2.1 Examine the code"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:131
#: 176e65bc1e7849fdabc792c430bf882e
msgid ""
"The first ``import`` statement imports the ``AddTwoInts`` service type "
"from the ``example_interfaces`` package. The following ``import`` "
"statement imports the ROS 2 Python client library, and specifically the "
"``Node`` class."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:141
#: a8b594efe4174b95aeda75c289fa140d
msgid ""
"The ``MinimalService`` class constructor initializes the node with the "
"name ``minimal_service``. Then, it creates a service and defines the "
"type, name, and callback."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:150
#: 868728e5b4e34ae5ad665f1aa64fde63
msgid ""
"The definition of the service callback receives the request data, sums "
"it, and returns the sum as a response."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:160
#: 803ceb5d72ef4cadb07a969e38433499
msgid ""
"Finally, the main class initializes the ROS 2 Python client library, "
"instantiates the ``MinimalService`` class to create the service node and "
"spins the node to handle callbacks."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:163
#: 4a828982d3ab427b8c74373d19ba1227
msgid "2.2 Add an entry point"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:165
#: 8f899081f7324dfcaf0460056fc364a5
msgid ""
"To allow the ``ros2 run`` command to run your node, you must add the "
"entry point to ``setup.py`` (located in the ``ros2_ws/src/py_srvcli`` "
"directory)."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:167
#: eba3f67024ee42b5b17f9d70ad321e3e
msgid "Add the following line between the ``'console_scripts':`` brackets:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:174
#: 49ca82fcb57b498a9e1b07da44781cc2
msgid "3 Write the client node"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:176
#: 0416a8b2349d4a86a8a138ed5241c44b
msgid ""
"Inside the ``ros2_ws/src/py_srvcli/py_srvcli`` directory, create a new "
"file called ``client_member_function.py`` and paste the following code "
"within:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:222
#: 28d461ddf7da4006861e537c37d43ca9
msgid "3.1 Examine the code"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:224
#: c830858fa1204c619d22339c8f55b2f3
msgid ""
"The only different ``import`` statement for the client is ``import sys``."
" The client node code uses `sys.argv "
"<https://docs.python.org/3/library/sys.html#sys.argv>`__ to get access to"
" command line input arguments for the request."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:227
#: fdeeea3c4224442fa22e938f351cbbb4
msgid ""
"The constructor definition creates a client with the same type and name "
"as the service node. The type and name must match for the client and "
"service to be able to communicate."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:230
#: 76451d4b05dc4e1a98c8be4c5585d156
msgid ""
"The ``while`` loop in the constructor checks if a service matching the "
"type and name of the client is available once a second."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:232
#: 29f07a659e23478880cec247ce60451a
msgid "Below the constructor is the request definition, followed by ``main``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:234
#: 0631e26374724a64b5f168fde81adbb1
msgid ""
"The only significant difference in the client's ``main`` is the ``while``"
" loop. The loop checks the ``future`` to see if there is a response from "
"the service, as long as the system is running. If the service has sent a "
"response, the result will be written in a log message."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:240
#: 1e9f0060606c417e8c6d5ac23d778c7e
msgid "3.2 Add an entry point"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:242
#: 8a4a98343d824b86b48709cf2b20bd8e
msgid ""
"Like the service node, you also have to add an entry point to be able to "
"run the client node."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:244
#: b8d5ac13a91247e18939457136740abf
msgid ""
"The ``entry_points`` field of your ``setup.py`` file should look like "
"this:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:256
#: 7e9c746f98c0423baf39b66eb2919f53
msgid "4 Build and run"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:258
#: 2400d99061f54456a1a385e6c887b4be
msgid ""
"It's good practice to run ``rosdep`` in the root of your workspace "
"(``ros2_ws``) to check for missing dependencies before building:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:262
#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:287
#: 891145c6e86347f088ef45c641ae6e76 f103550332d64df498df64a599c7103e
msgid "Linux"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:268
#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:293
#: 770c3eaa2f7940b1b629f7613909f07d c81fe38e52c041aca4740c9a3a555144
msgid "macOS"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:270
#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:274
#: 3f320741610f4d83bc8e3b519862f938 536cbf990f894f24b1f84762d150660e
msgid "rosdep only runs on Linux, so you can skip ahead to next step."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:272
#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:299
#: 0ba2e9a39d6f4bb69efb7cee2413cf7b b9b969afe6c94e65943d0ffd6b0a7a77
msgid "Windows"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:277
#: d9dddc7be2ad47c084b4a38381e2fd2b
msgid ""
"Navigate back to the root of your workspace, ``ros2_ws``, and build your "
"new package:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:283
#: 775c7fb59d97403389b5822372c60bf4
msgid "Open a new terminal, navigate to ``ros2_ws``, and source the setup files:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:305
#: 5b77b3afe609420a9d5b5e299db7e12b
msgid "Now run the service node:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:311
#: f773c6b8cf0f4d29b89e7d656a1a67a4
msgid "The node will wait for the client's request."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:313
#: 194e09c0112147658a8cd9ad209faad5
msgid ""
"Open another terminal and source the setup files from inside ``ros2_ws`` "
"again. Start the client node, followed by any two integers separated by a"
" space:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:320
#: 67d3b2fb3d3c48188a09b8b4ec88d4c0
msgid ""
"If you chose ``2`` and ``3``, for example, the client would receive a "
"response like this:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:326
#: 07129f89c3e143758579349dbcae4553
msgid ""
"Return to the terminal where your service node is running. You will see "
"that it published log messages when it received the request:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:334
#: dbe23f6c00094504a944b830f70be0de
msgid "Enter ``Ctrl+C`` in the server terminal to stop the node from spinning."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:338
#: 4e17a54ae0b24b329125612434cac842
msgid "Summary"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:340
#: 9a8abee612f3461ea5f40f0e571518b2
msgid ""
"You created two nodes to request and respond to data over a service. You "
"added their dependencies and executables to the package configuration "
"files so that you could build and run them, allowing you to see a "
"service/client system at work."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:344
#: fa1cbec671ae471ea8f4e80529e6697a
msgid "Next steps"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:346
#: ea81de7b21d04b6ca9d063904fb1bef4
msgid ""
"In the last few tutorials you've been utilizing interfaces to pass data "
"across topics and services. Next, you'll learn how to :doc:`create custom"
" interfaces <./Custom-ROS2-Interfaces>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:350
#: cf779e4f6f03494fa57bfb8dca39b806
msgid "Related content"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:352
#: ac686450bb714381a8735175307021a2
msgid ""
"There are several ways you could write a service and client in Python; "
"check out the ``minimal_client`` and ``minimal_service`` packages in the "
"`ros2/examples "
"<https://github.com/ros2/examples/tree/{REPOS_FILE_BRANCH}/rclpy/services>`_"
" repo."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:354
#: bbf764116883406c978b9265fbec4bf9
msgid ""
"In this tutorial, you used the ``call_async()`` API in your client node "
"to call the service. There is another service call API available for "
"Python called synchronous calls. We do not recommend using synchronous "
"calls, but if you'd like to learn more about them, read the guide to "
":doc:`Synchronous vs. asynchronous clients <../../How-To-Guides/Sync-Vs-"
"Async>`."
msgstr ""

#~ msgid ""
#~ "The ``--dependencies`` argument will "
#~ "automatically add the necessary dependency "
#~ "lines to ``package.xml``. ``example_interfaces`` "
#~ "is the package that includes `the "
#~ ".srv file "
#~ "<https://github.com/ros2/example_interfaces/blob/rolling/srv/AddTwoInts.srv>`__"
#~ " you will need to structure your "
#~ "requests and responses:"
#~ msgstr ""

#~ msgid ""
#~ "There are several ways you could "
#~ "write a service and client in "
#~ "Python; check out the ``minimal_client`` "
#~ "and ``minimal_service`` packages in the "
#~ "`ros2/examples "
#~ "<https://github.com/ros2/examples/tree/rolling/rclpy/services>`_ "
#~ "repo."
#~ msgstr ""

