# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-19 11:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:6
#: 70ce39b4d49944b4be4d29f6ffc064f6
msgid "Windows Tips and Tricks"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:10
#: efa1a0af5b2a4278ada5b515462c4466
msgid "Table of Contents"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:12
#: 24f0851ddc824fbd9c5b78792865ca83
msgid ""
"ROS 2 supports Windows 10 as a Tier 1 platform, which means that all code"
" that goes into the ROS 2 core must support Windows. For those used to "
"traditional development on Linux or other Unix-like systems, developing "
"on Windows can be a bit of a challenge. This document aims to lay out "
"some of those differences."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:17
#: eb027e87b98c4ebd93c48fc8747bb64a
msgid "Maximum Path Length"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:18
#: 9d86e924384c4d6d9f9544a97ddb90f7
msgid ""
"By default, Windows has a `maximum path length "
"<https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-"
"limitation>`__ of 260 characters. Practically speaking, 4 of those "
"characters are always used by the drive letter, colon, initial backslash,"
" and final NULL character. That means that only 256 characters are "
"available for the *sum* of all parts of the path. This has two practical "
"consequences for ROS 2:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:23
#: 4d334639cc2b4889a64b41786f8ebe0c
msgid ""
"Some of the ROS 2 internal path names are fairly long. Because of this, "
"we always recommend using a short path name for the root of your ROS 2 "
"directory, like ``C:\\dev``."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:24
#: 5f6fedbfd821418dbe07e318e2d35400
msgid ""
"When building ROS 2 from source, the default isolated build mode of "
"colcon can generate very long path names. To avoid these very long path "
"names, use ``--merge-install`` when building on Windows."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:26
#: a09330f6b2e24e9b805e2c81c5fad2b0
msgid ""
"**Note**: It is possible to change Windows to have much longer maximum "
"path lengths. See `this article <https://docs.microsoft.com/en-"
"us/windows/win32/fileio/maximum-file-path-limitation?tabs=cmd#enable-"
"long-paths-in-windows-10-version-1607-and-later>`__ for more information."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:32
#: 8dd1d5eafe8a45acbeb9fd7e6ed1b773
msgid "Symbol Visibility"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:33
#: f6815fe50b9540139d4d769bdd9533ae
msgid ""
"The Microsoft Visual C++ Compiler (MSVC) exposes symbols from a Dynamic "
"Link Library (DLL) only if they are explicitly exported. The clang and "
"gcc compilers have an option to do the same, but it is off by default. As"
" a result, when a library previously built on Linux is built on Windows, "
"other libraries may be unable to resolve the external symbols. Below are "
"examples of common error messages which can be caused by symbols not "
"being exposed:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:49
#: 8425de8e98cb4bcc8a38be346550bf09
msgid ""
"Symbol Visibility also impacts binary loading. If you are finding that a "
"composable node does not run or a Qt Visualizer isn't working, it may be "
"that the hosting process can not find an expected symbol export from the "
"binary. To diagnose this on Windows, the Windows developer tools includes"
" a program called Gflags to enable various options. One of those options "
"is called *Loader Snaps* which enables you to detect load failures while "
"debugging. Please visit the Microsoft Documentation for more information "
"on `Gflags <https://docs.microsoft.com/en-us/windows-"
"hardware/drivers/debugger/setting-and-clearing-image-file-flags>`__ and "
"`Loaders snaps <https://docs.microsoft.com/en-us/windows-"
"hardware/drivers/debugger/show-loader-snaps>`__."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:55
#: 4e560abfc6314f689b6de80ad668fdd0
msgid ""
"Two solutions to export symbols on Windows are Visibility Control Headers"
" and the ``WINDOWS_EXPORT_ALL_SYMBOLS`` property. Microsoft recommends "
"ROS developers use Visibility Control Headers to control the export of "
"symbols from a binary. Visibility Control Headers provide more control "
"over the symbol export macro and offer other benefits including smaller "
"binary size and reduced link times."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:60
#: 20ec30592e794978b981d6dfcc3eb581
msgid "Visibility Control Headers"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:61
#: aa3f2e6db5f54345b216896193b2027f
msgid ""
"The purpose of Visibility Control Headers headers is to define a macro "
"for each shared library which correctly declares symbols as dllimport or "
"dllexport. This is decided based on whether the library is being consumed"
" or being built itself. The logic in the macro also takes the compiler "
"into account and includes logic to select the appropriate syntax. The "
"`GCC visibility documentation <https://gcc.gnu.org/wiki/Visibility>`__ "
"includes step by step instructions for adding explicit symbol visibility "
"to a library “yielding the highest quality code with the greatest "
"reductions in binary size, load times and link times”. A header named "
"``visibility_control.h`` can be placed in the ``includes`` folder for "
"each library as shown in the example below. The example below shows how a"
" visibility control header would be added for a ``my_lib`` library with a"
" class called ``example_class``. Add a visibility header to the include "
"folder for the library. The boiler plate logic is used with the library "
"name used in the macro to make it unique in the project. In another "
"library, ``MY_LIB`` would be replaced with the library name."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:96
#: fc7acf32038348a8b6d21b87be593b8e
msgid ""
"For a complete example of this header, see `rviz_rendering "
"<https://github.com/ros2/rviz/blob/ros2/rviz_rendering/include/rviz_rendering/visibility_control.hpp>`__."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:98
#: 9eaae47a166e47b398e8599bd1e2e6c6
msgid ""
"To use the macro, add ``MY_LIB_PUBLIC`` before symbols which need to be "
"visible to external libraries. For example:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:106
#: 1b7c3789172e4c5da6fe2a9a4bbc60cd
msgid ""
"In order to build your library with correctly exported symbols, you will "
"need to add the following to your CMakeLists.txt file:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:115
#: 019e5ab303f442b48bf28d6007ab908c
msgid "WINDOWS_EXPORT_ALL_SYMBOLS Target Property"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:116
#: 6f623eb9a9434c9e9bf212bf79ed8da8
msgid ""
"CMake implements the ``WINDOWS_EXPORT_ALL_SYMBOLS`` property on Windows, "
"which causes function symbols to be automatically exported. More detail "
"of how it works can be found in the `WINDOWS_EXPORT_ALL_SYMBOLS CMake "
"Documentation "
"<https://cmake.org/cmake/help/latest/prop_tgt/WINDOWS_EXPORT_ALL_SYMBOLS.html>`__."
" The property can be implemented by adding the following to the "
"CMakeLists file:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:124
#: 67dd9b2ed7f84449922c8ea744a0a83c
msgid ""
"If there is more than one library in a CMakeLists file you will need to "
"call ``set_target_properties`` on each of them separately."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:126
#: f4bf1f347d6c4bb69a6794ebf4212b4e
msgid ""
"Note that a binary on Windows can only export 65,536 symbols. If a binary"
" exports more than that, you will get an error and should use the "
"visibility_control headers. There is an exception to this method in the "
"case of global data symbols. For example, a global static data member "
"like the one below."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:139
#: 7cea28cf4d534421adf7628a18b3eaf4
msgid ""
"In these cases dllimprort/dllexport must be applied explicitly. This can "
"be done using generate_export_header as described in the following "
"article: `Create dlls on Windows without declspec() using new CMake "
"export all feature <https://blog.kitware.com/create-dlls-on-windows-"
"without-declspec-using-new-cmake-export-all-feature/>`__."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:142
#: 0dbe7584a26241639f97008edbe44b7a
msgid ""
"Finally, it is important that the header file that exports the symbols be"
" included into at least one of the ``.cpp`` files in the package so that "
"the macros will get expanded and placed into the resulting binary. "
"Otherwise the symbols will still not be callable."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:147
#: 7753ec0e77f7495b98f730e8a34207c4
msgid "Debug builds"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:148
#: 76e2d595c7b44519bf6ece87e70b7a98
msgid ""
"When building in Debug mode on Windows, several very important things "
"change. The first is that all DLLs get ``_d`` automatically appended to "
"the library name. So if the library is called ``libfoo.dll``, in Debug "
"mode it will be ``libfoo_d.dll``. The dynamic linker on Windows also "
"knows to look for libraries of that form, so it will not find libraries "
"without the ``_d`` prefix. Additionally, Windows turns on a whole set of "
"compile-time and run-time checks in Debug mode that is far more strict "
"than Release builds. For these reasons, it is a good idea to run a "
"Windows Debug build and test on many pull requests."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:156
#: c24bce30c32349f4bdd6a9cd0015eee7
msgid "Forward-slash vs. back-slash"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:157
#: 2390542c2b71402eb95147e57a58e9f1
msgid ""
"In Windows the default path separator is a backslash (``\\``), which "
"differs from the forward-slash (``/``) used in Linux and macOS. Most of "
"the Windows APIs can deal with either as a path separator, but this is "
"not universally true. For instance, the ``cmd.exe`` shell can only do "
"tab-completion when using the backslash character, not the forward-slash."
" For maximum compatibility on Windows, a backslash should always be used "
"as the path separator on Windows."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:163
#: 965f7408a3bc4925b74f7913efc7b118
msgid "Patching vendored packages"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:164
#: 8b72ab2bbeda4ef8a085c2d02d7d75af
msgid ""
"When vendoring a package in ROS 2, it is often necessary to apply a patch"
" to fix a bug, add a feature, etc. The typical way to do this is to "
"modify the ``ExternalProject_add`` call to add a ``PATCH`` command, using"
" the ``patch`` executable. Unfortunately, the ``patch`` executable as "
"delivered by chocolatey requires Administrator access to run. The "
"workaround is to use ``git apply-patch`` when applying patches to "
"external projects."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:169
#: 802a5106815040b281c5d079db2f602d
msgid ""
"``git apply-patch`` has its own issues in that it only works properly "
"when applied to a git repository. For that reason, external projects "
"should always use the ``GIT`` method to obtain the project and then use "
"the ``PATCH_COMMAND`` to invoke ``git apply-patch``."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:172
#: 465c9b5ec5bd4fbd9867c7629d65bbdc
msgid "An example usage of all of the above looks something like:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:193
#: 540225abc060498093c3053b1e018b25
msgid "Windows slow timers (slowness in general)"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:194
#: 12c919305a1f472e83b74ba264e35fee
msgid ""
"Software running on Windows is, in general, much slower than that running"
" on Linux. This is due to a number of factors, from the default time "
"slice (every 20 ms, according to the `documentation "
"<https://docs.microsoft.com/en-"
"us/windows/win32/procthread/multitasking>`__), to the number of anti-"
"virus and anti-malware processes running, to the number of background "
"processes running. Because of all of this, tests should *never* expect "
"tight timing on Windows. All tests should have generous timeouts, and "
"only expect events to happen eventually (this will also prevent tests "
"from being flakey on Linux)."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:200
#: 7bed29a7029e4bc58d2fb0b04cbd88cf
msgid "Shells"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:201
#: 17ba2df4e40e46b9969dba2e54c7f016
msgid ""
"There are two main command-line shells on Windows: the venerable "
"``cmd.exe``, and PowerShell."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:203
#: fc9e3f971616478e82362c7279a3b3a9
msgid ""
"``cmd.exe`` is the command shell that most closely emulates the old DOS "
"shell, though with greatly enhanced capabilities. It is completely text "
"based, and only understands DOS/Windows ``batch`` files."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:206
#: 6b79e42d22bc4a22b4667a6f71868dcf
msgid ""
"PowerShell is the newer, object-based shell that Microsoft recommends for"
" most new applications. It understands ``ps1`` files for configuration."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:209
#: d8179a6d70494dde902cc835b0c7d767
msgid ""
"ROS 2 supports both ``cmd.exe`` and PowerShell, so any changes "
"(especially to things like ``ament`` or ``colcon``) should be tested on "
"both."
msgstr ""

