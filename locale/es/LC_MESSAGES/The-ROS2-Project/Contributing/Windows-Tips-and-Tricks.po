# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-21 15:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: es <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:6
msgid "Windows Tips and Tricks"
msgstr "Consejos y trucos de Windows"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:10
msgid "Table of Contents"
msgstr "Tabla de Contenido"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:12
msgid ""
"ROS 2 supports Windows 10 as a Tier 1 platform, which means that all code "
"that goes into the ROS 2 core must support Windows. For those used to "
"traditional development on Linux or other Unix-like systems, developing on "
"Windows can be a bit of a challenge. This document aims to lay out some of "
"those differences."
msgstr ""
"ROS 2 es compatible con Windows 10 como plataforma de nivel 1, lo que "
"significa que todo el código que se incluye en el núcleo de ROS 2 debe ser "
"compatible con Windows. Para aquellos que están acostumbrados al desarrollo "
"tradicional en Linux u otros sistemas similares a Unix, desarrollar en "
"Windows puede ser un desafío. Este documento pretende exponer algunas de "
"esas diferencias."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:17
msgid "Maximum Path Length"
msgstr "Longitud máxima de la ruta"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:18
msgid ""
"By default, Windows has a `maximum path length "
"<https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-"
"limitation>`__ of 260 characters. Practically speaking, 4 of those "
"characters are always used by the drive letter, colon, initial backslash, "
"and final NULL character. That means that only 256 characters are available "
"for the *sum* of all parts of the path. This has two practical consequences "
"for ROS 2:"
msgstr ""
"De forma predeterminada, Windows tiene una `longitud de ruta máxima "
"<https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-"
"limitation>`__ de 260 caracteres. En términos prácticos, 4 de esos "
"caracteres siempre se utilizan para la letra de la unidad, los dos puntos, "
"la barra invertida inicial y el carácter NULL final. Eso significa que solo "
"hay 256 caracteres disponibles para la *suma* de todas las partes de la "
"ruta. Esto tiene dos consecuencias prácticas para ROS 2:"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:23
msgid ""
"Some of the ROS 2 internal path names are fairly long. Because of this, we "
"always recommend using a short path name for the root of your ROS 2 "
"directory, like ``C:\\dev``."
msgstr ""
"Algunos de los nombres de rutas internas de ROS 2 son bastante largos. "
"Debido a esto, siempre recomendamos usar un nombre  corto para la ruta del "
"directorio raíz de ROS 2, como ``C:\\dev``."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:24
msgid ""
"When building ROS 2 from source, the default isolated build mode of colcon "
"can generate very long path names. To avoid these very long path names, use "
"``--merge-install`` when building on Windows."
msgstr ""
"Al compilar ROS 2 desde la fuente, el modo de compilación aislado "
"predeterminado de colcon puede generar nombres de ruta muy largos. Para "
"evitar estos nombres de ruta muy largos, use ``--merge-install`` cuando "
"construya en Windows."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:26
msgid ""
"**Note**: It is possible to change Windows to have much longer maximum path "
"lengths. See `this article <https://docs.microsoft.com/en-"
"us/windows/win32/fileio/maximum-file-path-limitation?tabs=cmd#enable-long-"
"paths-in-windows-10-version-1607-and-later>`__ for more information."
msgstr ""
"**Nota**: es posible cambiar Windows para tener longitudes de ruta máximas "
"mucho más largas. Ver `este artículo <https://docs.microsoft.com/en-"
"us/windows/win32/fileio/maximum-file-path-limitation?tabs=cmd#enable-long-"
"paths-in-windows-10-version-1607-and-later>`__ para más información."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:32
msgid "Symbol Visibility"
msgstr "Visibilidad del símbolo"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:33
msgid ""
"The Microsoft Visual C++ Compiler (MSVC) exposes symbols from a Dynamic Link"
" Library (DLL) only if they are explicitly exported. The clang and gcc "
"compilers have an option to do the same, but it is off by default. As a "
"result, when a library previously built on Linux is built on Windows, other "
"libraries may be unable to resolve the external symbols. Below are examples "
"of common error messages which can be caused by symbols not being exposed:"
msgstr ""
"El compilador de Microsoft Visual C++ (MSVC) expone símbolos de una "
"biblioteca de vínculos dinámicos (DLL) solo si se exportan explícitamente. "
"Los compiladores clang y gcc tienen una opción para hacer lo mismo, pero "
"está desactivada de forma predeterminada. Como resultado, cuando una "
"biblioteca compilada previamente en Linux se compila en Windows, es posible "
"que otras bibliotecas no puedan resolver los símbolos externos. A "
"continuación se muestran ejemplos de mensajes de error comunes que pueden "
"deberse a que los símbolos no están expuestos:"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:49
msgid ""
"Symbol Visibility also impacts binary loading. If you are finding that a "
"composable node does not run or a Qt Visualizer isn't working, it may be "
"that the hosting process can not find an expected symbol export from the "
"binary. To diagnose this on Windows, the Windows developer tools includes a "
"program called Gflags to enable various options. One of those options is "
"called *Loader Snaps* which enables you to detect load failures while "
"debugging. Please visit the Microsoft Documentation for more information on "
"`Gflags <https://docs.microsoft.com/en-us/windows-"
"hardware/drivers/debugger/setting-and-clearing-image-file-flags>`__ and "
"`Loaders snaps <https://docs.microsoft.com/en-us/windows-"
"hardware/drivers/debugger/show-loader-snaps>`__."
msgstr ""
"La visibilidad del símbolo también afecta la carga binaria. Si encuentra que"
" un nodo composable no se ejecuta o un Qt Visualizer no funciona, es posible"
" que el proceso de alojamiento no pueda encontrar una exportación de símbolo"
" esperada del binario. Para diagnosticar esto en Windows, las herramientas "
"de desarrollo de Windows incluyen un programa llamado Gflags para habilitar "
"varias opciones. Una de esas opciones se llama *Loader Snaps*, que le "
"permite detectar errores de carga durante la depuración. Visite la "
"Documentación de Microsoft para obtener más información sobre `Gflags "
"<https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/setting-"
"and-clearing-image-file-flags>`__  y `Loaders snaps "
"<https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/show-"
"loader-snaps>`__."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:55
msgid ""
"Two solutions to export symbols on Windows are Visibility Control Headers "
"and the ``WINDOWS_EXPORT_ALL_SYMBOLS`` property. Microsoft recommends ROS "
"developers use Visibility Control Headers to control the export of symbols "
"from a binary. Visibility Control Headers provide more control over the "
"symbol export macro and offer other benefits including smaller binary size "
"and reduced link times."
msgstr ""
"Dos soluciones para exportar símbolos en Windows son los encabezados de "
"control de visibilidad y la propiedad ``WINDOWS_EXPORT_ALL_SYMBOLS``. "
"Microsoft recomienda a los desarrolladores de ROS que utilicen encabezados "
"de control de visibilidad para controlar la exportación de símbolos desde un"
" binario. Los encabezados de control de visibilidad brindan más control "
"sobre la macro de exportación de símbolos y ofrecen otros beneficios, "
"incluido un tamaño binario más pequeño y tiempos de enlace reducidos."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:60
msgid "Visibility Control Headers"
msgstr "Encabezados de control de visibilidad"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:61
msgid ""
"The purpose of Visibility Control Headers headers is to define a macro for "
"each shared library which correctly declares symbols as dllimport or "
"dllexport. This is decided based on whether the library is being consumed or"
" being built itself. The logic in the macro also takes the compiler into "
"account and includes logic to select the appropriate syntax. The `GCC "
"visibility documentation <https://gcc.gnu.org/wiki/Visibility>`__ includes "
"step by step instructions for adding explicit symbol visibility to a library"
" “yielding the highest quality code with the greatest reductions in binary "
"size, load times and link times”. A header named ``visibility_control.h`` "
"can be placed in the ``includes`` folder for each library as shown in the "
"example below. The example below shows how a visibility control header would"
" be added for a ``my_lib`` library with a class called ``example_class``. "
"Add a visibility header to the include folder for the library. The boiler "
"plate logic is used with the library name used in the macro to make it "
"unique in the project. In another library, ``MY_LIB`` would be replaced with"
" the library name."
msgstr ""
"El propósito de los encabezados de control de visibilidad es definir una "
"macro para cada biblioteca compartida que declare correctamente los símbolos"
" como dllimport o dllexport. Esto se decide en función de si la biblioteca "
"se consume o se construye por sí misma. La lógica de la macro también tiene "
"en cuenta el compilador e incluye lógica para seleccionar la sintaxis "
"adecuada. La `documentación de visibilidad de GCC  "
"<https://gcc.gnu.org/wiki/Visibility>`__ incluye instrucciones paso a paso "
"para agregar visibilidad de símbolos explícitos a una biblioteca "
"\"produciendo el código de la más alta calidad con las mayores reducciones "
"en tamaño binario, tiempos de carga y tiempos de enlace\". Se puede colocar "
"un encabezado llamado ``visibility_control.h`` en la carpeta ``includes`` "
"para cada biblioteca, como se muestra en el siguiente ejemplo. El siguiente "
"ejemplo muestra cómo se agregaría un encabezado de control de visibilidad "
"para una biblioteca ``my_lib`` con una clase llamada ``example_class``. "
"Agregue un encabezado de visibilidad a la carpeta de inclusión de la "
"biblioteca. La  boiler plate logic (secciones de código que se repiten en "
"múltiples lugares) se utiliza con el nombre de la biblioteca utilizada en la"
" macro para que sea única en el proyecto. En otra biblioteca, ``MY_LIB`` se "
"reemplazaría con el nombre de la biblioteca."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:96
msgid ""
"For a complete example of this header, see `rviz_rendering "
"<https://github.com/ros2/rviz/blob/ros2/rviz_rendering/include/rviz_rendering/visibility_control.hpp>`__."
msgstr ""
"Para ver un ejemplo completo de este encabezado, consulte `rviz_rendering "
"<https://github.com/ros2/rviz/blob/ros2/rviz_rendering/include/rviz_rendering/visibility_control.hpp>`__."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:98
msgid ""
"To use the macro, add ``MY_LIB_PUBLIC`` before symbols which need to be "
"visible to external libraries. For example:"
msgstr ""
"Para usar la macro, agregue ``MY_LIB_PUBLIC`` antes de los símbolos que "
"deben ser visibles para las bibliotecas externas. Por ejemplo:"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:106
msgid ""
"In order to build your library with correctly exported symbols, you will "
"need to add the following to your CMakeLists.txt file:"
msgstr "La propiedad se puede implementar agregando lo siguiente al archivo"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:115
msgid "WINDOWS_EXPORT_ALL_SYMBOLS Target Property"
msgstr "WINDOWS_EXPORT_ALL_SYMBOLS Target Property"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:116
msgid ""
"CMake implements the ``WINDOWS_EXPORT_ALL_SYMBOLS`` property on Windows, "
"which causes function symbols to be automatically exported. More detail of "
"how it works can be found in the `WINDOWS_EXPORT_ALL_SYMBOLS CMake "
"Documentation "
"<https://cmake.org/cmake/help/latest/prop_tgt/WINDOWS_EXPORT_ALL_SYMBOLS.html>`__."
" The property can be implemented by adding the following to the CMakeLists "
"file:"
msgstr ""
"CMake implementa la propiedad ``WINDOWS_EXPORT_ALL_SYMBOLS`` en Windows, lo "
"que hace que los símbolos de función se exporten automáticamente. Se pueden "
"encontrar más detalles de cómo funciona en `WINDOWS_EXPORT_ALL_SYMBOLS CMake"
" Documentation "
"<https://cmake.org/cmake/help/latest/prop_tgt/WINDOWS_EXPORT_ALL_SYMBOLS.html>`__."
" La propiedad se puede implementar agregando lo siguiente al archivo "
"CMakeLists:"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:124
msgid ""
"If there is more than one library in a CMakeLists file you will need to call"
" ``set_target_properties`` on each of them separately."
msgstr ""
"Si hay más de una biblioteca en un archivo CMakeLists, deberá llamar a "
"``set_target_properties`` en cada una de ellas por separado."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:126
msgid ""
"Note that a binary on Windows can only export 65,536 symbols. If a binary "
"exports more than that, you will get an error and should use the "
"visibility_control headers. There is an exception to this method in the case"
" of global data symbols. For example, a global static data member like the "
"one below."
msgstr ""
"Tenga en cuenta que un binario en Windows solo puede exportar 65 536 "
"símbolos. Si un binario exporta más que eso, obtendrá un error y debe usar "
"los encabezados de control de visibilidad. Hay una excepción a este método "
"en el caso de los símbolos de datos globales. Por ejemplo, un miembro de "
"datos estáticos globales como el siguiente."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:139
msgid ""
"In these cases dllimprort/dllexport must be applied explicitly. This can be "
"done using generate_export_header as described in the following article: "
"`Create dlls on Windows without declspec() using new CMake export all "
"feature <https://blog.kitware.com/create-dlls-on-windows-without-declspec-"
"using-new-cmake-export-all-feature/>`__."
msgstr ""
"En estos casos, dllimprort/dllexport debe aplicarse explícitamente. Esto se "
"puede hacer usando generate_export_header como se describe en el siguiente "
"artículo: `Crear dlls en Windows sin declspec() usando la nueva "
"característica de exportación de CMake <https://blog.kitware.com/create-"
"dlls-on-windows-without-declspec-using-new-cmake-export-all-feature/>`__."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:142
msgid ""
"Finally, it is important that the header file that exports the symbols be "
"included into at least one of the ``.cpp`` files in the package so that the "
"macros will get expanded and placed into the resulting binary. Otherwise the"
" symbols will still not be callable."
msgstr ""
"Finalmente, es importante que el archivo de encabezado que exporta los "
"símbolos se incluya en al menos uno de los archivos ``.cpp`` en el paquete "
"para que las macros se expandan y se coloquen en el binario resultante. De "
"lo contrario, los símbolos seguirán sin poderse llamar."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:147
msgid "Debug builds"
msgstr "Debug builds"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:148
msgid ""
"When building in Debug mode on Windows, several very important things "
"change. The first is that all DLLs get ``_d`` automatically appended to the "
"library name. So if the library is called ``libfoo.dll``, in Debug mode it "
"will be ``libfoo_d.dll``. The dynamic linker on Windows also knows to look "
"for libraries of that form, so it will not find libraries without the ``_d``"
" prefix. Additionally, Windows turns on a whole set of compile-time and run-"
"time checks in Debug mode that is far more strict than Release builds. For "
"these reasons, it is a good idea to run a Windows Debug build and test on "
"many pull requests."
msgstr ""
"Al compilar en modo de depuración en Windows, cambian varias cosas muy "
"importantes. La primera es que se agrega  automáticamente  ``_d`` al final "
"del nombre de todas las DLL. Entonces, si la biblioteca se llama "
"``libfoo.dll``, en el modo de depuración será ``libfoo_d.dll``. El enlazador"
" dinámico en Windows también sabe buscar bibliotecas de esa forma, por lo "
"que no encontrará bibliotecas sin el prefijo ``_d``. Además, Windows activa "
"un conjunto completo de comprobaciones en tiempo de compilación y tiempo de "
"ejecución en el modo de depuración que es mucho más estricto que las "
"compilaciones de lanzamiento. Por estas razones, es una buena idea ejecutar "
"una compilación y prueba de depuración de Windows en muchas solicitudes de "
"incorporación de cambios."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:156
msgid "Forward-slash vs. back-slash"
msgstr "Barra inclinada frente a barra inclinada inversa"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:157
msgid ""
"In Windows the default path separator is a backslash (``\\``), which differs"
" from the forward-slash (``/``) used in Linux and macOS. Most of the Windows"
" APIs can deal with either as a path separator, but this is not universally "
"true. For instance, the ``cmd.exe`` shell can only do tab-completion when "
"using the backslash character, not the forward-slash. For maximum "
"compatibility on Windows, a backslash should always be used as the path "
"separator on Windows."
msgstr ""
"En Windows, el separador de ruta predeterminado es una barra diagonal "
"inversa (``\\``), que difiere de la barra diagonal (``/``) utilizada en "
"Linux y macOS. La mayoría de las API de Windows pueden funcionar como un "
"separador de ruta, pero esto no es universalmente cierto. Por ejemplo, el "
"shell ``cmd.exe`` solo puede completar con tabulación cuando se usa el "
"carácter de barra invertida, no la barra diagonal. Para lograr la máxima "
"compatibilidad en Windows, siempre se debe usar una barra invertida como "
"separador de ruta en Windows."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:163
msgid "Patching vendored packages"
msgstr "Parches de vendored packages"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:164
msgid ""
"When vendoring a package in ROS 2, it is often necessary to apply a patch to"
" fix a bug, add a feature, etc. The typical way to do this is to modify the "
"``ExternalProject_add`` call to add a ``PATCH`` command, using the ``patch``"
" executable. Unfortunately, the ``patch`` executable as delivered by "
"chocolatey requires Administrator access to run. The workaround is to use "
"``git apply-patch`` when applying patches to external projects."
msgstr ""
"Al hacer copias locales de un paquete de terceros (vendoring) en ROS 2, a "
"menudo es necesario aplicar un parche para corregir un error, agregar una "
"característica, etc. La forma típica de hacer esto es modificar la llamada "
"``ExternalProject_add`` para agregar un comando ``PATCH``, usando el "
"ejecutable ``patch``. Desafortunadamente, el ejecutable ``patch`` tal como "
"lo entrega chocolatey requiere acceso de administrador para ejecutarse. La "
"solución es usar ``git apply-patch`` al aplicar parches a proyectos "
"externos."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:169
msgid ""
"``git apply-patch`` has its own issues in that it only works properly when "
"applied to a git repository. For that reason, external projects should "
"always use the ``GIT`` method to obtain the project and then use the "
"``PATCH_COMMAND`` to invoke ``git apply-patch``."
msgstr ""
"``git apply-patch`` tiene sus propios problemas, ya que solo funciona "
"correctamente cuando se aplica a un repositorio de git. Por esa razón, los "
"proyectos externos siempre deben usar el método ``GIT`` para obtener el "
"proyecto y luego usar ``PATCH_COMMAND`` para invocar ``git apply-patch``."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:172
msgid "An example usage of all of the above looks something like:"
msgstr "Un ejemplo de uso de todo lo anterior se ve asi:"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:193
msgid "Windows slow timers (slowness in general)"
msgstr "Tiempos más lentos en Windows  (lentitud en general)"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:194
msgid ""
"Software running on Windows is, in general, much slower than that running on"
" Linux. This is due to a number of factors, from the default time slice "
"(every 20 ms, according to the `documentation "
"<https://docs.microsoft.com/en-"
"us/windows/win32/procthread/multitasking>`__), to the number of anti-virus "
"and anti-malware processes running, to the number of background processes "
"running. Because of all of this, tests should *never* expect tight timing on"
" Windows. All tests should have generous timeouts, and only expect events to"
" happen eventually (this will also prevent tests from being flakey on "
"Linux)."
msgstr ""
"El software que se ejecuta en Windows es, en general, mucho más lento que el"
" que se ejecuta en Linux. Esto se debe a una serie de factores, desde el "
"intervalo de tiempo predeterminado (cada 20 ms, según la `documentación "
"<https://docs.microsoft.com/en-us/windows/win32/procthread/multitasking>`__)"
" , a la cantidad de procesos antivirus y antimalware en ejecución, a la "
"cantidad de procesos en segundo plano en ejecución. Debido a todo esto, las "
"pruebas *nunca* deben esperar tiempos ajustados en Windows. Todas las "
"pruebas deben tener tiempos de espera generosos y solo esperar que los "
"eventos sucedan eventualmente (esto también evitará que las pruebas sean "
"inestables en Linux)."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:200
msgid "Shells"
msgstr "Shells"

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:201
msgid ""
"There are two main command-line shells on Windows: the venerable "
"``cmd.exe``, and PowerShell."
msgstr ""
"Hay dos shells principales de línea de comandos en Windows: el venerable "
"``cmd.exe`` y PowerShell."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:203
msgid ""
"``cmd.exe`` is the command shell that most closely emulates the old DOS "
"shell, though with greatly enhanced capabilities. It is completely text "
"based, and only understands DOS/Windows ``batch`` files."
msgstr ""
"``cmd.exe`` es el shell de comandos que más se parece al antiguo shell de "
"DOS, aunque con capacidades muy mejoradas. Está completamente basado en "
"texto y sólo entiende archivos ``batch`` files de DOS/Windows."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:206
msgid ""
"PowerShell is the newer, object-based shell that Microsoft recommends for "
"most new applications. It understands ``ps1`` files for configuration."
msgstr ""
"PowerShell es el shell más nuevo basado en objetos que Microsoft recomienda "
"para la mayoría de las aplicaciones nuevas. Comprende archivos ``ps1`` para "
"la configuración."

#: ../../source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst:209
msgid ""
"ROS 2 supports both ``cmd.exe`` and PowerShell, so any changes (especially "
"to things like ``ament`` or ``colcon``) should be tested on both."
msgstr ""
"ROS 2 es compatible tanto con ``cmd.exe`` como con PowerShell, por lo que "
"cualquier cambio (especialmente en cosas como ``ament`` o ``colcon``) debe "
"probarse en ambos."
