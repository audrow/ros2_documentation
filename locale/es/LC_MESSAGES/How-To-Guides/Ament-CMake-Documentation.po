# Archivo de traducción al español para la documentación de ROS 2.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# Cristian Chitiva <cychitivav@unal.edu.co>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-19 11:55+0000\n"
"Language-Team: es <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:7
#: 15985fe745424ca797a698bab9611d8b
msgid "ament_cmake user documentation"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:9
#: 3b5aa53486e1417c9ef509a2e45c5fbe
msgid ""
"``ament_cmake`` is the build system for CMake based packages in ROS 2 (in"
" particular, it will be used for most C/C++ projects). It is a set of "
"scripts enhancing CMake and adding convenience functionality for package "
"authors. Before using ``ament_cmake``, it is very helpful to know the "
"basics of `CMake <https://cmake.org/cmake/help/v3.8/>`__. An official "
"tutorial can be found `here "
"<https://cmake.org/cmake/help/latest/guide/tutorial/index.html>`__."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:16
#: fac3f64b2769449eb5dc7fbae802d097
msgid "Table of Contents"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:19
#: f7e520a0dd5a429684e18aa69c35ddde
msgid "Basics"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:21
#: 6a3caae41d0749a9822e0621ffe5ef2a
msgid ""
"A basic CMake outline can be produced using ``ros2 pkg create "
"<package_name>`` on the command line. The build information is then "
"gathered in two files: the ``package.xml`` and the ``CMakeLists.txt``, "
"which must be in the same directory. The ``package.xml`` must contain all"
" dependencies and a bit of metadata to allow colcon to find the correct "
"build order for your packages, to install the required dependencies in "
"CI, and to provide the information for a release with ``bloom``. The "
"``CMakeLists.txt`` contains the commands to build and package executables"
" and libraries and will be the main focus of this document."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:27
#: 851c42e858f241c7854005f76a5223d9
msgid "Basic project outline"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:29
#: d924bf137da64314b8617ee124ac7674
msgid "The basic outline of the ``CMakeLists.txt`` of an ament package contains:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:38
#: 3e0b6fbc2899483caa3d0125504cdfc9
msgid ""
"The argument to ``project`` will be the package name and must be "
"identical to the package name in the ``package.xml``."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:40
#: bca0eeb9b7ea43dd88c0d89f0aea028b
msgid ""
"The project setup is done by ``ament_package()`` and this call must occur"
" exactly once per package. ``ament_package()`` installs the "
"``package.xml``, registers the package with the ament index, and installs"
" configuration (and possibly target) files for CMake so that it can be "
"found by other packages using ``find_package``. Since ``ament_package()``"
" gathers a lot of information from the ``CMakeLists.txt`` it should be "
"the last call in your ``CMakeLists.txt``."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:44
#: 8379aa3e17724a5a87c1b0eee4186043
msgid "``ament_package`` can be given additional arguments:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:46
#: b02b9d3737f94c1b8b1d988d4b63864f
msgid ""
"``CONFIG_EXTRAS``: a list of CMake files (``.cmake`` or ``.cmake.in`` "
"templates expanded by ``configure_file()``) which should be available to "
"clients of the package. For an example of when to use these arguments, "
"see the discussion in `Adding resources`_. For more information on how to"
" use template files, see `the official documentation "
"<https://cmake.org/cmake/help/v3.8/command/configure_file.html>`__."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:50
#: ed0d965db761471c9bf4d2c7fe6f04b8
msgid ""
"``CONFIG_EXTRAS_POST``: same as ``CONFIG_EXTRAS``, but the order in which"
" the files are added differs. While ``CONFIG_EXTRAS`` files are included "
"before the files generated for the ``ament_export_*`` calls the files "
"from ``CONFIG_EXTRAS_POST`` are included afterwards."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:53
#: 4943d7c494754567aecc01f24e865567
msgid ""
"Instead of adding to ``ament_package``, you can also add to the variable "
"``${PROJECT_NAME}_CONFIG_EXTRAS`` and "
"``${PROJECT_NAME}_CONFIG_EXTRAS_POST`` with the same effect. The only "
"difference is again the order in which the files are added with the "
"following total order:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:56
#: c0ca7f3f41364b7e8eaf97510e2a76f4
msgid "files added by ``CONFIG_EXTRAS``"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:58
#: 49877f5df1984b1a8d2eb0b3457ccb1c
msgid "files added by appending to ``${PROJECT_NAME}_CONFIG_EXTRAS``"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:60
#: 07fe499ec9114cb792c86e21448de617
msgid "files added by appending to ``${PROJECT_NAME}_CONFIG_EXTRAS_POST``"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:62
#: c9fb01091e68482c978234454e69d021
msgid "files added by ``CONFIG_EXTRAS_POST``"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:65
#: a085e39c84c743b8a46b90635a82a465
msgid "Compiler and linker options"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:67
#: bb30c86c7cbf4241870809870e8e0d1b
msgid ""
"ROS 2 targets compilers which comply with the C++17 and C99 standard. "
"Newer versions might be targeted in the future and are referenced `here "
"<https://www.ros.org/reps/rep-2000.html>`__. Therefore it is customary to"
" set the corresponding CMake flags:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:80
#: c2267d6813324cdd92ac801d468cae0e
msgid ""
"To keep the code clean, compilers should throw warnings for questionable "
"code and these warnings should be fixed."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:82
#: 7907e64307574453b5481de4c220566e
msgid "It is recommended to at least cover the following warning levels:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:84
#: 91d7937a44f54374a3c0fb7d1adcf9df
msgid "For Visual Studio: the default ``W1`` warnings"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:86
#: d10c1f79883b41e594335de17281aeb8
msgid ""
"For GCC and Clang: ``-Wall -Wextra -Wpedantic`` are highly recommended "
"and ``-Wshadow`` is advisable"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:88
#: cf9780c1f870495e85fc127fb986a69e
msgid ""
"It is currently recommended to use ``add_compile_options`` to add these "
"options for all targets. This avoids cluttering the code with target-"
"based compile options for all executables, libraries, and tests:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:98
#: 0eaf7870c4a64d3ca7c62beb2115c719
msgid "Finding dependencies"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:100
#: 0e990813c2c8464a9abda36b76865040
msgid ""
"Most ``ament_cmake`` projects will have dependencies on other packages. "
"In CMake, this is accomplished by calling ``find_package``. For instance,"
" if your package depends on ``rclcpp``, then the ``CMakeLists.txt`` file "
"should contain:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:110
#: 1d28d226227541a39e85b6945f996928
msgid ""
"It should never be necessary to ``find_package`` a library that is not "
"explicitly needed but is a dependency of another dependency that is "
"explicitly needed. If that is the case, file a bug against the "
"corresponding package."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:114
#: 95f4b13a41e14a109da73850d2b76fd2
msgid "Adding targets"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:116
#: 7178145cba64402681836da4670bb7f9
msgid ""
"In CMake nomenclature, ``targets`` are the artifacts that this project "
"will create. Either libraries or executables can be created, and a single"
" project can contain zero or many of each of them."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:121
#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:213
#: 3ff89ecb29804225a040f2ed8552cbdc 800ffe54ffa749aeb408523538e02d37
msgid "Libraries"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:123
#: 6f95fcbb25924ded8175f73ec25adafe
msgid ""
"These are created with a call to ``add_library``, which should contain "
"both the name of the target and the source files that should be compiled "
"to create the library."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:125
#: 2fb0323f67344aa186946d2730735a62
msgid ""
"With the separation of header files and implementation in C/C++, it is "
"not usually necessary to add header files as arguments to "
"``add_library``."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:127
#: 9116a4265110416d89f453415e3a398c
msgid "The following best practice is proposed:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:129
#: c2c9aceb47e849bd9d2702615c5de04a
msgid ""
"Put all headers which should be usable by clients of this library (and "
"therefore must be installed) into a subdirectory of the ``include`` "
"folder named like the package, while all other files (``.c/.cpp`` and "
"header files which should not be exported) are inside the ``src`` folder"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:131
#: 475bfa18d88f4f4c9c41b923e196c57e
msgid ""
"Only ``.c/.cpp`` files are explicitly referenced in the call to "
"``add_library``"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:133
#: b6f8ea799db64c2f9216faa4c9792288
msgid "Find headers to your library ``my_library`` via"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:142
#: 0981b4cfe6d947fb91449a0374838dfb
msgid ""
"This adds all files in the folder ``${CMAKE_CURRENT_SOURCE_DIR}/include``"
" to the public interface during build time and all files in the include "
"folder (relative to ``${CMAKE_INSTALL_DIR}``) when being installed."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:144
#: 94d5bcb3e86f490ab38576beb18855a7
msgid "``ros2 pkg create`` creates a package layout that follows these rules."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:148
#: da94422659c7472db2e0a6366d829c41
msgid ""
"Since Windows is one of the officially supported platforms, to have "
"maximum impact, any package should also build on Windows. The Windows "
"library format enforces symbol visibility; that is, every symbol which "
"should be used from a client has to be explicitly exported by the library"
" (and symbols need to be implicitly imported)."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:151
#: e83a838e86b64f39a00f8d4394558911
msgid ""
"Since GCC and Clang builds do not generally do this, it is advised to use"
" the logic in `the GCC wiki <https://gcc.gnu.org/wiki/Visibility>`__. To "
"use it for a package called ``my_library``:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:154
#: a0d4906f2dfe460b9ce242df0bef739a
msgid ""
"Copy the logic in the link into a header file called "
"``visibility_control.hpp``."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:156
#: 38c3ccee41a248a39f957c7ec1003cb7
msgid ""
"Replace ``DLL`` by ``MY_LIBRARY`` (for an example, see visibility control"
" of `rviz_rendering "
"<https://github.com/ros2/rviz/blob/ros2/rviz_rendering/include/rviz_rendering/visibility_control.hpp>`__)."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:158
#: c2040f6b85964e188523245d4585d7fe
msgid ""
"Use the macros \"MY_LIBRARY_PUBLIC\" for all symbols you need to export "
"(i.e. classes or functions)."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:160
#: a558d8a621f642369a57a34a2fb51e33
msgid "In the project ``CMakeLists.txt`` use:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:166
#: 2843de90187e4d7ea30351219f2b854e
msgid ""
"For more details, see :ref:`Windows Symbol Visibility in the Windows Tips"
" and Tricks document <Windows_Symbol_Visibility>`."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:168
#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:283
#: 24a29e10338747cea1800515ec1443a1 25ebbb63ce6b4e04a19866d4fdcfaaa2
msgid "Executables"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:170
#: 937a2dbbeeeb40c889fabf9015129b48
msgid ""
"These should be created with a call to ``add_executable``, which should "
"contain both the name of the target and the source files that should be "
"compiled to create the executable. The executable may also have to be "
"linked with any libraries created in this package by using "
"``target_link_libraries``."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:173
#: 6dc6c8c054b04bafbf2eaa3f7846b23d
msgid ""
"Since executables aren't generally used by clients as a library, no "
"header files need to be put in the ``include`` directory."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:175
#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:292
#: 480b2e01632c46d882397582513cf12f d54b737e86cb4f1583cfb1cd1a12fbe2
msgid ""
"In the case that a package has both libraries and executables, make sure "
"to combine the advice from both \"Libraries\" and \"Executables\" above."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:178
#: c1151985f2dc4ef4af02079026d6befd
msgid "Linking to dependencies"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:180
#: 824e8630c0954d9c8b8d31b49fe1337d
msgid "There are two ways to link your targets against a dependency."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:182
#: 54b7634292344293b6060489c94f791b
msgid ""
"The first and recommended way is to use the ament macro "
"``ament_target_dependencies``. As an example, suppose we want to link "
"``my_library`` against the linear algebra library Eigen3."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:190
#: 59270797a68643f4a4e1e546abf15825
msgid ""
"It includes the necessary headers and libraries and their dependencies to"
" be correctly found by the project."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:192
#: e57398c632f24e7baee7ae15c3c5c2bc
msgid "The second way is to use ``target_link_libraries``."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:194
#: b56775e55c0a4f2097a25c7343d0bf0e
msgid ""
"Modern CMake prefers to use only targets, exporting and linking against "
"them. CMake targets may be namespaced, similar to C++. Prefer to use the "
"namespaced targets if they are available. For instance, ``Eigen3`` "
"defines the target ``Eigen3::Eigen``."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:199
#: 27e95dc4ae0246d3b8f2520552c2f0fc
msgid "In the example of Eigen3, the call should then look like"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:205
#: 2ea145073f2a490b8c32f8863def10cf
msgid ""
"This will also include necessary headers, libraries and their "
"dependencies. Note that this dependency must have been previously "
"discovered via a call to ``find_package``."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:209
#: 506dddb7fbc8404eaf02305fbc8e4cab
msgid "Installing"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:215
#: a7e2fdd5e7bb49d9bff8d257dcce3ebd
msgid ""
"When building a reusable library, some information needs to be exported "
"for downstream packages to easily use it."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:217
#: 6f5eeb5d5bbb41309bc147687bde83e7
msgid ""
"First, install the headers files which should be available to clients. "
"The include directory is custom to support overlays in ``colcon``; see "
"https://colcon.readthedocs.io/en/released/user/overriding-packages.html"
"#install-headers-to-a-unique-include-directory for more information."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:227
#: 65890b38f4c14ccca9a552f9c29a5a93
msgid ""
"Next, install the targets and create the export target "
"(``export_${PROJECT_NAME}``) that other code will use to find this "
"package. Note that you can use a single ``install`` call to install all "
"of the libraries in the project."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:243
#: 677e32f5571e4d5c93dc4f3d7c88749a
msgid "Here is what's happening in the snippet above:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:245
#: a03bc556194844e988cc6699b661ac01
msgid ""
"The ``ament_export_targets`` macro exports the targets for CMake. This is"
" necessary to allow your library's clients to use the "
"``target_link_libraries(client PRIVATE my_library::my_library)`` syntax. "
"If the export set includes a library, add the option "
"``HAS_LIBRARY_TARGET`` to ``ament_export_targets``, which adds potential "
"libraries to environment variables."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:249
#: a004775a6120494ab10a308908fb50c6
msgid ""
"The ``ament_export_dependencies`` exports dependencies to downstream "
"packages. This is necessary so that the user of the library does not have"
" to call ``find_package`` for those dependencies, too."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:254
#: c11f3fa7d2ca4837909e31bed6faa8e2
msgid ""
"Calling ``ament_export_targets``, ``ament_export_dependencies``, or other"
" ament commands from a CMake subdirectory will not work as expected. This"
" is because the CMake subdirectory has no way of setting necessary "
"variables in the parent scope where ``ament_package`` is called."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:259
#: 381b8e08b7dc45349854bef34279ea6f
msgid ""
"Windows DLLs are treated as runtime artifacts and installed into the "
"``RUNTIME DESTINATION`` folder. It is therefore advised to keep the "
"``RUNTIME`` install even when developing libraries on Unix based systems."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:262
#: a3e067dd685f429ba820421bc0f3c754
msgid ""
"The ``EXPORT`` notation of the install call requires additional "
"attention: It installs the CMake files for the ``my_library`` target. It "
"must be named exactly the same as the argument in "
"``ament_export_targets``. To ensure that it can be used via "
"``ament_target_dependencies``, it should not be named exactly the same as"
" the library name, but instead should have a prefix like ``export_`` (as "
"shown above)."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:267
#: ee325d91e0a14502b6fec804991b3613
msgid ""
"All install paths are relative to ``CMAKE_INSTALL_PREFIX``, which is "
"already set correctly by colcon/ament."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:269
#: 109bac87338d4da98b0e5f45bca3f60f
msgid ""
"There are two additional functions which are available, but are "
"superfluous for target based installs:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:276
#: 600b4e67ff57407f8a142d9ab77dc5c8
msgid ""
"The first macro marks the directory of the exported include directories. "
"The second macro marks the location of the installed library (this is "
"done by the ``HAS_LIBRARY_TARGET`` argument in the call to "
"``ament_export_targets``). These should only be used if the downstream "
"projects can't or don't want to use CMake target based dependencies."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:280
#: 230c77ff09064bfb9473f48fd574d4f2
msgid ""
"Some of the macros can take different types of arguments for non-target "
"exports, but since the recommended way for modern Make is to use targets,"
" we will not cover them here. Documentation of these options can be found"
" in the source code itself."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:285
#: 819282a67a184c6e94c70d47600f64e4
msgid ""
"When installing an executable, the following stanza *must be followed "
"exactly* for the rest of the ROS tooling to find it:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:295
#: 6ba677b89be2465ba8636b49990122d7
msgid "Linting and Testing"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:297
#: 1740ed2452e14e99b2d3838bf762a22a
msgid ""
"In order to separate testing from building the library with colcon, wrap "
"all calls to linters and tests in a conditional:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:307
#: b76758f35e0248f795750d5e8c4513b2
msgid "Linting"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:309
#: ecd6c3bcf8614305b7305f8db3390587
msgid ""
"It's advised to use the combined call from `ament_lint_auto "
"<https://github.com/ament/ament_lint/blob/{REPOS_FILE_BRANCH}/ament_lint_auto/doc/index.rst#ament_lint_auto>`_:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:316
#: 3955d1d301c14e4aaf050e20948e72e5
msgid ""
"This will run linters as defined in the ``package.xml``. It is "
"recommended to use the set of linters defined by the package "
"``ament_lint_common``. The individual linters included there, as well as "
"their functions, can be seen in the `ament_lint_common docs "
"<https://github.com/ament/ament_lint/blob/{REPOS_FILE_BRANCH}/ament_lint_common/doc/index.rst>`_."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:320
#: 5db8e6f40f074365a4dd7b9c45971d41
msgid ""
"Linters provided by ament can also be added separately, instead of "
"running ``ament_lint_auto``. One example of how to do so can be found in "
"the `ament_cmake_lint_cmake documentation "
"<https://github.com/ament/ament_lint/blob/{REPOS_FILE_BRANCH}/ament_cmake_lint_cmake/doc/index.rst>`_."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:324
#: b9532733368a488e85276ac6983223f4
msgid "Testing"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:326
#: d14b8a64af5b49ce80fa03386903f3bf
msgid "Ament contains CMake macros to simplify setting up GTests. Call:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:333
#: 70ba13fa576d43ac967c98b8c53d5b5a
msgid ""
"to add a GTest. This is then a regular target which can be linked against"
" other libraries (such as the project library). The macros have "
"additional parameters:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:337
#: 45f19abf10494cc882697bd2f2d3e847
msgid ""
"``APPEND_ENV``: append environment variables. For instance you can add to"
" the ament prefix path by calling:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:346
#: 8fc0165206e546c289d6b5c62b7ca7a9
msgid ""
"``APPEND_LIBRARY_DIRS``: append libraries so that they can be found by "
"the linker at runtime. This can be achieved by setting environment "
"variables like ``PATH`` on Windows and ``LD_LIBRARY_PATH`` on Linux, but "
"this makes the call platform specific."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:349
#: 950161071c2141718d32d3ff173bc7b9
msgid "``ENV``: set environment variables (same syntax as ``APPEND_ENV``)."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:351
#: e44ea9963a534f5c80702dfac7dc7806
msgid ""
"``TIMEOUT``: set a test timeout in second. The default for GTests is 60 "
"seconds.  For example:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:357
#: e4bb877dde8f427397c02ae4eb42c05d
msgid ""
"``SKIP_TEST``: skip this test (will be shown as \"passed\" in the console"
" output)."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:359
#: 621fde45dc33436c9a11672550e11143
msgid "``SKIP_LINKING_MAIN_LIBRARIES``: Don't link against GTest."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:361
#: dc3034f0f55542e7b93a0c5b922d5a8f
msgid "``WORKING_DIRECTORY``: set the working directory for the test."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:363
#: 2b97de429c9541cf847866d30b8bd5f2
msgid ""
"The default working directory otherwise is the "
"``CMAKE_CURRENT_BINARY_DIR``, which is described in the `CMake "
"documentation "
"<https://cmake.org/cmake/help/latest/variable/CMAKE_CURRENT_BINARY_DIR.html>`_."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:365
#: 491ddf3a6ea142e296d18a639508b59a
msgid "Similarly, there is a CMake macro to set up GTest including GMock:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:372
#: 7f83fdb57f784a3485de8bf33eaee27b
msgid "It has the same additional parameters as ``ament_add_gtest``."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:375
#: 4b92c57a28844df991676bfdb222f56b
msgid "Extending ament"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:377
#: 2eb67866b994440f9a926ea771c8cdd9
msgid ""
"It is possible to register additional macros/functions with "
"``ament_cmake`` and extend it in several ways."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:380
#: 6bee032373334bd9b3822ff441630343
msgid "Adding a function/macro to ament"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:382
#: 89edb84869234a4683de36f0e83c327b
msgid ""
"Extending ament will often times mean that you want to have some "
"functions available to other packages. The best way to provide the macro "
"to client packages is to register it with ament."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:385
#: 5b5c085f199842208c8d92cdf813e751
msgid ""
"This can be done by appending the ``${PROJECT_NAME}_CONFIG_EXTRAS`` "
"variable, which is used by ``ament_package()`` via"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:394
#: 5cd74146b8cb49cba5e9b0bd8514a81d
msgid ""
"Alternatively, you can directly add the files to the ``ament_package()`` "
"call:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:404
#: c679f7b910a6472097fa03b6df964532
msgid "Adding to extension points"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:406
#: c3d51b71cae241568fce271c2917cca8
msgid ""
"In addition to simple files with functions that can be used in other "
"packages, you can also add extensions to ament. Those extensions are "
"scripts which are executed with the function which defines the extension "
"point. The most common use-case for ament extensions is probably "
"registering rosidl message generators: When writing a generator, you "
"normally want to generate all messages and services with your generator "
"also without modifying the code for the message/service definition "
"packages. This is possible by registering the generator as an extension "
"to ``rosidl_generate_interfaces``."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:412
#: 0120d7090e084f738fab5a2644ddaa12
msgid "As an example, see"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:421
#: 2c0c0d00ce764368b145734a3d3fb40e
msgid ""
"which registers the macro "
"``rosidl_generator_cpp_generate_interfaces.cmake`` for the package "
"``rosidl_generator_cpp`` to the extension point "
"``rosidl_generate_interfaces``. When the extension point gets executed, "
"this will trigger the execution of the script "
"``rosidl_generator_cpp_generate_interfaces.cmake`` here. In particular, "
"this will call the generator whenever the function "
"``rosidl_generate_interfaces`` gets executed."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:425
#: 116954f181de411689b6b4acbbe4b091
msgid ""
"The most important extension point for generators, aside from "
"``rosidl_generate_interfaces``, is ``ament_package``, which will simply "
"execute scripts with the ``ament_package()`` call. This extension point "
"is useful when registering resources (see below)."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:428
#: 798d106a230341d4a307a7421b32a650
msgid ""
"``ament_register_extension`` is a function which takes exactly three "
"arguments:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:430
#: 7e89cae2a53746d2a00975dd5fc07636
msgid ""
"``extension_point``: The name of the extension point (most of the time "
"this will be one of ``ament_package`` or ``rosidl_generate_interfaces``)"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:432
#: eb4ab01f34fb4033ab027d168278f0e3
msgid ""
"``package_name``: The name of the package containing the CMake file (i.e."
" the project name of the project where the file is written to)"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:434
#: 387e9dff985a4e52ad1c7547993c616d
msgid ""
"``cmake_filename``: The CMake file executed when the extension point is "
"run"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:438
#: 3272327e85a8428faf00848215665a5e
msgid ""
"It is possible to define custom extension points in a similar manner to "
"``ament_package`` and ``rosidl_generate_interfaces``, but this should "
"hardly be necessary."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:441
#: f2384812731e4f68a29b0ad6b3425779
msgid "Adding extension points"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:443
#: f84bc5c463ca4ebeb116f8a8f4bd67ce
msgid ""
"Very rarely, it might be interesting to define a new extension point to "
"ament."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:445
#: 2d723871a6714de98cd03656019d284d
msgid ""
"Extension points can be registered within a macro so that all extensions "
"will be executed when the corresponding macro is called. To do so:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:448
#: 5226753d6e0d449a8e5b3c3109c1fb23
msgid ""
"Define and document a name for your extension (e.g. "
"``my_extension_point``), which is the name passed to the "
"``ament_register_extension`` macro when using the extension point."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:450
#: 0b8bd0453d294d289bec746a5c10b735
msgid "In the macro/function which should execute the extensions call:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:456
#: e0bfd961b4f14c01960a1c1f3510f088
msgid ""
"Ament extensions work by defining a variable containing the name of the "
"extension point and filling it with the macros to be executed. Upon "
"calling ``ament_execute_extensions``, the scripts defined in the variable"
" are then executed one after another."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:460
#: 9af63297a6264688854f7730641eaee3
msgid "Adding resources"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:462
#: 609824b251e647ac9a6b767a11e7cd17
msgid ""
"Especially when developing plugins or packages which allow plugins it is "
"often essential to add resources to one ROS package from another (e.g. a "
"plugin). Examples can be plugins for tools using the pluginlib."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:465
#: 825daa565ac44566be32155d1c0acbba
msgid ""
"This can be achieved using the ament index (also called \"resource "
"index\")."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:468
#: 34a85b13eadf47ca90bb85f8db3fd875
msgid "The ament index explained"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:470
#: 99f1f8e08b2e46c8b25aa648caf60985
msgid ""
"For details on the design and intentions, see `here "
"<https://github.com/ament/ament_cmake/blob/{REPOS_FILE_BRANCH}/ament_cmake_core/doc/resource_index.md>`__"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:472
#: 8ec36c81e5ca48d6b3830898b55ff030
msgid ""
"In principle, the ament index is contained in a folder within the "
"install/share folder of your package. It contains shallow subfolders "
"named after different types of resources. Within the subfolder, each "
"package providing said resource is referenced by name with a \"marker "
"file\". The file may contain whatever content necessary to obtain the "
"resources, e.g. relative paths to the installation directories of the "
"resource, it may also be simply empty."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:477
#: ffbc4ceb89094c5e9a09e5855e532781
msgid ""
"To give an example, consider providing display plugins for RViz: When "
"providing RViz plugins in a project named ``my_rviz_displays`` which will"
" be read by the pluginlib, you will provide a ``plugin_description.xml`` "
"file, which will be installed and used by the pluginlib to load the "
"plugins. To achieve this, the plugin_description.xml is registered as a "
"resource in the resource_index via"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:485
#: 95c9feca87f44d3e9210476f737d9292
msgid ""
"When running ``colcon build``, this installs a file ``my_rviz_displays`` "
"into a subfolder ``rviz_common__pluginlib__plugin`` into the "
"resource_index. Pluginlib factories within rviz_common will know to "
"gather information from all folders named "
"``rviz_common__pluginlib__plugin`` for packages that export plugins. The "
"marker file for pluginlib factories contains an install-folder relative "
"path to the ``plugins_description.xml`` file (and the name of the library"
" as marker file name). With this information, the pluginlib can load the "
"library and know which plugins to load from the "
"``plugin_description.xml`` file."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:490
#: 66760d21546341ee83c3e7edc627946c
msgid ""
"As a second example, consider the possibility to let your own RViz "
"plugins use your own custom meshes. Meshes get loaded at startup time so "
"that the plugin owner does not have to deal with it, but this implies "
"RViz has to know about the meshes. To achieve this, RViz provides a "
"function:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:498
#: d025eb4bb7db4d04bd789b0dd40f4232
msgid ""
"This registers the directories as an ogre_media resource in the ament "
"index. In short, it installs a file named after the project which calls "
"the function into a subfolder called ``rviz_ogre_media_exports``. The "
"file contains the install folder relative paths to the directories listed"
" in the macros. On startup time, RViz can now search for all folders "
"called ``rviz_ogre_media_exports`` and load resources in all folders "
"provided. These searches are done using ``ament_index_cpp`` (or "
"``ament_index_py`` for Python packages)."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:504
#: e942c031ae2643158d570e7d80735795
msgid ""
"In the following sections we will explore how to add your own resources "
"to the ament index and provide best practices for doing so."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:507
#: dbc3c8ca0a134f4697a7f40d098cb231
msgid "Querying the ament index"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:509
#: 2487ba8bc3904e2ca9e5739c6f83a87e
msgid ""
"If necessary, it is possible to query the ament index for resources via "
"CMake. To do so, there are three functions:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:512
#: 689e0a23c49d453a9885a0203e86d833
msgid ""
"``ament_index_has_resource``: Obtain a prefix path to the resource if it "
"exists with the following parameters:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:514
#: 3ea59286ede549aeadc0f845cfd6ba2d
msgid ""
"``var``: the output parameter: fill this variable with FALSE if the "
"resource does not exist or the prefix path to the resource otherwise"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:516
#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:524
#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:536
#: 2c8cf2d3021a4e9aaf6050948c36e6b1 3cc6cc7630994686b8639e3353237378
#: c6905fb4de934ab790a21d9bd00a2899
msgid ""
"``resource_type``: The type of the resource (e.g. "
"``rviz_common__pluginlib__plugin``)"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:518
#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:526
#: 539dffed061f4c4495fe0211c7a076bd 641b48b0c3b94f57857ca031d58729e4
msgid ""
"``resource_name``: The name of the resource which usually amounts to the "
"name of the package having added the resource of type resource_type (e.g."
" ``rviz_default_plugins``)"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:520
#: ef4bd4e0e22547b98bf5bf5d2bb0ecbf
msgid ""
"``ament_index_get_resource``: Obtain the content of a specific resource, "
"i.e. the contents of the marker file in the ament index."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:522
#: e0b7259dfa554c9681adea15790ca341
msgid ""
"``var``: the output parameter: filled with the content of the resource "
"marker file if it exists."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:528
#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:538
#: 242e5bcb93f449ca8ab075be10efa4ef 37e711cb31e64abd988ad7d74cfb8668
msgid ""
"``PREFIX_PATH``: The prefix path to search for (usually, the default "
"``ament_index_get_prefix_path()`` will be enough)."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:530
#: fc9ab0182547431f8d17731367dc8c3b
msgid ""
"Note that ``ament_index_get_resource`` will throw an error if the "
"resource does not exist, so it might be necessary to check using "
"``ament_index_has_resource``."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:532
#: 6160d1778c6c452b885213709d835c55
msgid ""
"``ament_index_get_resources``: Get all packages which registered "
"resources of a specific type from the index"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:534
#: 0e0b57a989dc421cb4f6694e41dfbd5d
msgid ""
"``var``: Output parameter: filled with a list of names of all packages "
"which registered a resource of resource_type"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:541
#: 8ae044fe1fbf4001854aaa5b03792275
msgid "Adding to the ament index"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:543
#: 87a9e528f0504230aff889ca33a0e7bd
msgid "Defining a resource requires two bits of information:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:545
#: 09a6ffee3ad542a6aa11206892c666a1
msgid "a name for the resource which must be unique,"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:547
#: 4cac906fd6ee44ef8d1c62ff3401f412
msgid ""
"a layout of the marker file, which can be anything and could also be "
"empty (this is true for instance for the \"package\" resource marking a "
"ROS 2 package)"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:549
#: 12d039faca50417a962a222c307bac47
msgid "For the RViz mesh resource, the corresponding choices were:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:551
#: d8d4c9b8359a4fef86065322771d6c09
msgid "``rviz_ogre_media_exports`` as name of the resource,"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:553
#: 3e5efe6b06544f5b91c9a6d6d9828403
msgid ""
"install path relative paths to all folders containing resources. This "
"will already enable you to write the logic for using the corresponding "
"resource in your package."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:555
#: 6a10bb0ba46048748ff04a620f2cf2df
msgid ""
"To allow users to easily register resources for your package, you should "
"furthermore provide macros or functions such as the pluginlib function or"
" ``rviz_ogre_media_exports`` function."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:557
#: 6df1b09fbb4144e68bba0933eb214bd5
msgid ""
"To register a resource, use the ament function "
"``ament_index_register_resource``. This will create and install the "
"marker files in the resource_index. As an example, the corresponding call"
" for ``rviz_ogre_media_exports`` is the following:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:565
#: e6a028b899fb461ea8d5734c5e1c3c0d
msgid ""
"This installs a file named like ``${PROJECT_NAME}`` into a folder "
"``rviz_ogre_media_exports`` into the resource_index with content given by"
" variable ``${OGRE_MEDIA_RESOURCE_FILE}``. The macro has a number of "
"parameters that can be useful:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:568
#: cf134dbb855843f09ce72b5caddae51a
msgid ""
"the first (unnamed) parameter is the name of the resource, which amounts "
"to the name of the folder in the resource_index"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:570
#: c78d8e40993d4e37a1dd1bad798d8fdc
msgid ""
"``CONTENT``: The content of the marker file as string. This could be a "
"list of relative paths, etc. ``CONTENT`` cannot be used together with "
"``CONTENT_FILE``."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:572
#: 6001b87a760a440fbdb96d1c57baa68e
msgid ""
"``CONTENT_FILE``: The path to a file which will be use to create the "
"marker file. The file can be a plain file or a template file expanded "
"with ``configure_file()``. ``CONTENT_FILE`` cannot be used together with "
"``CONTENT``."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:575
#: e788a8c667da428ca81897f111a9f697
msgid ""
"``PACKAGE_NAME``: The name of the package/library exporting the resource,"
" which amounts to the name of the marker file. Defaults to "
"``${PROJECT_NAME}``."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:577
#: f985d35735424758a33090bcf935a952
msgid ""
"``AMENT_INDEX_BINARY_DIR``: The base path of the generated ament index. "
"Unless really necessary, always use the default "
"``${CMAKE_BINARY_DIR}/ament_cmake_index``."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:579
#: f1e22b1b909c4876b58493a36533a8bb
msgid "``SKIP_INSTALL``: Skip installing the marker file."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:581
#: 721684ada0914ada9a9939ca38849214
msgid ""
"Since only one marker file exists per package, it is usually a problem if"
" the CMake function/macro gets called twice by the same project. However,"
" for large projects it might be best to split up calls registering "
"resources."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:584
#: 29aa484e699f4545a2a3582f8c49d61b
msgid ""
"Therefore, it is best practice to let a macro registering a resource such"
" as ``register_rviz_ogre_media_exports.cmake`` only fill some variables. "
"The real call to ``ament_index_register_resource`` can then be added "
"within an ament extension to ``ament_package``. Since there must only "
"ever be one call to ``ament_package`` per project, there will always only"
" be one place where the resource gets registered. In the case of "
"``rviz_ogre_media_exports`` this amounts to the following strategy:"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:589
#: bfc81501bf0a4571b79d8be831022d9e
msgid ""
"The macro ``register_rviz_ogre_media_exports`` takes a list of folders "
"and appends them to a variable called ``OGRE_MEDIA_RESOURCE_FILE``."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:591
#: 522602c541a249f1b32ce1219cfc934e
msgid ""
"Another macro called ``register_rviz_ogre_media_exports_hook`` calls "
"``ament_index_register_resource`` if ``${OGRE_MEDIA_RESOURCE_FILE}`` is "
"non-empty."
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:593
#: e99bcb1c69074ebe8d369d05cd97d979
msgid ""
"The ``register_rviz_ogre_media_exports_hook.cmake`` file is registered as"
" an ament extension in a third file "
"``register_rviz_ogre_media_exports_hook-extras.cmake`` via calling"
msgstr ""

#: ../../source/How-To-Guides/Ament-CMake-Documentation.rst:600
#: 108e209da6344cb3b06f47b41696d896
msgid ""
"The files ``register_rviz_ogre_media_exports.cmake`` and "
"``register_rviz_ogre_media_exports_hook-extra.cmake`` are registered as "
"``CONFIG_EXTRA`` with ``ament_package()``."
msgstr ""

#~ msgid ""
#~ "It's advised to use the combined "
#~ "call from `ament_lint_auto "
#~ "<https://github.com/ament/ament_lint/blob/rolling/ament_lint_auto/doc/index.rst#ament_lint_auto>`_:"
#~ msgstr ""

#~ msgid ""
#~ "This will run linters as defined "
#~ "in the ``package.xml``. It is "
#~ "recommended to use the set of "
#~ "linters defined by the package "
#~ "``ament_lint_common``. The individual linters "
#~ "included there, as well as their "
#~ "functions, can be seen in the "
#~ "`ament_lint_common docs "
#~ "<https://github.com/ament/ament_lint/blob/rolling/ament_lint_common/doc/index.rst>`_."
#~ msgstr ""

#~ msgid ""
#~ "Linters provided by ament can also "
#~ "be added separately, instead of running"
#~ " ``ament_lint_auto``. One example of how"
#~ " to do so can be found in "
#~ "the `ament_cmake_lint_cmake documentation "
#~ "<https://github.com/ament/ament_lint/blob/rolling/ament_cmake_lint_cmake/doc/index.rst>`_."
#~ msgstr ""

#~ msgid ""
#~ "For details on the design and "
#~ "intentions, see `here "
#~ "<https://github.com/ament/ament_cmake/blob/rolling/ament_cmake_core/doc/resource_index.md>`__"
#~ msgstr ""

