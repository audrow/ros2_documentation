# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-19 11:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/How-To-Guides/DDS-tuning.rst:7 c35a1491d222405289ce8040da6ead6f
msgid "DDS tuning information"
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:9 07624d1f818a4f98858700abcdb4a276
msgid ""
"This page provides some guidance on parameter tunings that were found to "
"address issues faced while using various DDS implementations on Linux in "
"real-world situations. It is possible that the issues we identified on "
"Linux or while using one vendor may occur for other platforms and vendors"
" not documented here."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:12
#: d40b16e13b1c49e6a0e4883801d757ac
msgid ""
"The recommendations below are starting points for tuning; they worked for"
" specific systems and environments, but the tuning may vary depending on "
"a number of factors. You may need to increase or decrease values while "
"debugging relative to factors like message size, network topology, etc."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:15
#: 928be5df7e88423e87e91f8e1f5a6edd
msgid ""
"It is important to recognize that tuning parameters can come at a cost to"
" resources, and may affect parts of your system beyond the scope of the "
"desired improvements. The benefits of improving reliability should be "
"weighed against any detriments for each individual case."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:21
#: 63032f3f852042cf8c0f4c18c840a728
msgid "Cross-vendor tuning"
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:23
#: a3a0763f28214561b7c485a7b337161e
msgid ""
"**Issue:** Sending data over lossy (usually WiFi) connections becomes "
"problematic when some IP fragments are dropped, possibly causing the "
"kernel buffer on the receiving side to become full."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:25
#: 32255db8e3354decaf1a1632eb8aae1b
msgid ""
"When a UDP packet is missing at least one IP fragment, the rest of the "
"received fragments fill up the kernel buffer. By default, the Linux "
"kernel will time out after 30s of trying to recombine packet fragments. "
"Since the kernel buffer is full at this point (default size is 256KB), no"
" new fragments can come in, and so the connection will seemingly \"hang\""
" for long periods of time."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:29
#: 857e1cbaf771434b9954f1af0762129d
msgid ""
"This issue is generic across all DDS vendors, so the solutions involve "
"adjusting kernel parameters."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:31
#: 23f70adf2fcd42fa8e1784e0fbb469ed
msgid "**Solution:** Use best-effort QoS settings instead of reliable."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:33
#: a254cab7ede945e5bedee0489d3ee15f
msgid ""
"Best-effort settings reduce the amount of network traffic since the DDS "
"implementation does not have to incur the overhead of reliable "
"communications, where publishers require acknowledgements for messages "
"sent to subscribers and must resend samples that have not been properly "
"received."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:35
#: 35850c4eea1742438d8349f95e27b3f0
msgid ""
"If the kernel buffer for IP fragments gets full, though, the symptom is "
"still the same (blocking for 30s). This solution should improve the issue"
" somewhat without having to adjust parameters."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:38
#: c00f944020304fddbcce02a57c0b89e6
msgid "**Solution:** Reduce the value of the ``ipfrag_time`` parameter."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:40
#: 561853e5c3574f5b85efa1314d5dba97
msgid ""
"``net.ipv4.ipfrag_time / /proc/sys/net/ipv4/ipfrag_time`` (default 30s) :"
" Time in seconds to keep an IP fragment in memory."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:43
#: 0aee3b61db64408a840d50fe112404c8
msgid "Reduce the value, for example, to 3s, by running:"
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:49
#: 097583393c3245318af2a59090bb45d5
msgid ""
"Reducing this parameter’s value also reduces the window of time where no "
"fragments are received. The parameter is global for all incoming "
"fragments, so the feasibility of reducing its value needs to be "
"considered for every environment."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:52
#: c931820335514f8ab2741fbb33bf0dfd
msgid "**Solution:** Increase the value of the ``ipfrag_high_thresh`` parameter."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:54
#: ea5859e962624a79a6b3c50ecae611d6
msgid ""
"``net.ipv4.ipfrag_high_thresh / /proc/sys/net/ipv4/ipfrag_high_thresh`` "
"(default: 262144 bytes): Maximum memory used to reassemble IP fragments."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:57
#: edd67f9fa7504c09815afbeceec4c416
msgid "Increase the value, for example, to 128MB, by running:"
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:63
#: 89b8add284844b5b992f4f269190ebfd
msgid ""
"Significantly increasing this parameter’s value is an attempt to ensure "
"that the buffer never becomes completely full. However, the value would "
"likely have to be significantly high to hold all data received during the"
" time window of ``ipfrag_time``, assuming every UDP packet lacks one "
"fragment."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:66
#: 307a8b9035ce4426a2a2c35f51b7d4ff
msgid ""
"**Issue:** Sending custom messages with large variable-sized arrays of "
"non-primitive types causes high serialization/deserialization overhead "
"and CPU load. This can lead to stalling of the publisher due to excessive"
" time spent in ``publish()`` and tools like ``ros2 topic hz`` under "
"reporting the actual frequency of messages being received. Note that for "
"example ``builtin_interfaces/Time`` is also considered a non-primitive "
"type and will incur higher serialization overhead. Because of the "
"increased serialization overhead, severe performance degradation can be "
"observed when naively transitioning custom message types from ROS 1 to "
"ROS 2."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:71
#: f5f626eb81434f36bc3343b6008c3d98
msgid ""
"**Workaround:** Use multiple arrays of primitives instead of a single "
"array of custom types, or pack into byte array as done e.g. in "
"``PointCloud2`` messages. For example, instead of defining a ``FooArray``"
" message as:"
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:78
#: 68deefbe4c7e4ca6a4624ec6e6a9fe79
msgid "with ``Foo`` is defined as:"
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:85
#: dbdabf9de191411fa85291f026ca43ba
msgid "Instead, define ``FooArray`` as:"
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:93
#: 7aff7cb1da6f4ef5b59e60326b7e7512
msgid "Fast RTPS tuning"
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:95
#: 8ff5f3af8d5340c280448119ba0ecc4e
msgid ""
"**Issue:** Fast RTPS floods the network with large pieces of data or "
"fast-published data when operating over WiFi."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:97
#: bd3e6e82e9864fe0bc3e9ced88802e86
msgid "See the solutions under :ref:`Cross-vendor tuning <cross-vendor-tuning>`."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:100
#: 6dd6d691058541edab88aeec023d931f
msgid "Cyclone DDS tuning"
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:102
#: 7cedd1ddd96b436a8c51ba90c45f419c
msgid ""
"**Issue:** Cyclone DDS is not delivering large messages reliably, despite"
" using reliable settings and transferring over a wired network."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:104
#: 29f54918fa8d476bb960018348ad85fa
msgid ""
"This issue should be `addressed soon <https://github.com/eclipse-"
"cyclonedds/cyclonedds/issues/484>`_. Until then, we’ve come up with the "
"following solution (debugged using `this test program "
"<https://github.com/jacobperron/pc_pipe>`_):"
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:107
#: f94af9378407414d92eb1d7a29d5471b
msgid ""
"**Solution:** Increase the maximum Linux kernel receive buffer size and "
"the minimum socket receive buffer size that Cyclone uses."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:109
#: 60f3984b747c4e86b329cf40c2f10f1e
msgid "*Adjustments to solve for a 9MB message:*"
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:111
#: ../../source/How-To-Guides/DDS-tuning.rst:150
#: 146d7d32c0fb46939c7ee63dc276038c da5516412f44472496ec90b432a3c421
msgid "Set the maximum receive buffer size, ``rmem_max``, by running:"
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:117
#: 8f0d9c71fbf74e2fb07a56a33d67a8c6
msgid ""
"Or permanently set it by editing the ``/etc/sysctl.d/10-cyclone-"
"max.conf`` file to contain:"
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:123
#: 7fd96c63aaa245439a6ec13818cd3105
msgid ""
"Next, to set the minimum socket receive buffer size that Cyclone "
"requests, write out a configuration file for Cyclone to use while "
"starting, like so:"
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:137
#: 69f57fc4d0514cd8859e79f7b32afe1c
msgid ""
"Then, whenever you are going to run a node, set the following environment"
" variable:"
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:144
#: b1a45819112a49a4846925dfb030e865
msgid "RTI Connext tuning"
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:146
#: 8cc956ace1e94a7081f8707226fce471
msgid ""
"**Issue:** Connext is not delivering large messages reliably, despite "
"using reliable settings and transferring over a wired network."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:148
#: 6b171138c3994f94947553154c36fa4d
msgid ""
"**Solution:** This `Connext QoS profile "
"<https://github.com/jacobperron/pc_pipe/blob/master/etc/ROS2TEST_QOS_PROFILES.xml>`_,"
" along with increasing the ``rmem_max`` parameter."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:156
#: 1d95dcd28852407f8c3ed072194394aa
msgid ""
"By tuning ``net.core.rmem_max`` to 4MB in the Linux kernel, the QoS "
"profile can produce truly reliable behavior."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:158
#: 95e14b97a1db448ea19a6aaa4fb153c6
msgid ""
"This configuration has been proven to reliably deliver messages via "
"SHMEM|UDPv4, and with just UDPv4 on a single machine. A multi-machine "
"configuration was also tested with ``rmem_max`` at 4MB and at 20MB (two "
"machines connected with 1Gbps ethernet), with no dropped messages and "
"average message delivery times of 700ms and 371ms, respectively."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:161
#: 418fd574a0674f52b9090498620191d6
msgid ""
"Without configuring the kernel’s ``rmem_max``, the same Connext QoS "
"profile took up to 12 seconds for the data to be delivered. However, it "
"always at least managed to complete the delivery."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:164
#: 289faa94d8e44c41a2cbed99f7933f16
msgid ""
"**Solution:** Use the `Connext QoS profile "
"<https://github.com/jacobperron/pc_pipe/blob/master/etc/ROS2TEST_QOS_PROFILES.xml>`_"
" *without* adjusting ``rmem_max``."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:166
#: 04ec4e4c13cc488191c5cbfbe6af2805
msgid ""
"The ROS2TEST_QOS_PROFILES.xml file was configured using RTI’s "
"documentation on `configuring flow controllers <https://community.rti.com"
"/forum-topic/transfering-large-data-over-dds>`_. It has slow, medium and "
"fast flow controllers (seen in the Connext QoS profile link)."
msgstr ""

#: ../../source/How-To-Guides/DDS-tuning.rst:168
#: 4ad3808475374d5d843ba70fbcacdb89
msgid ""
"The medium flow controller produced the best results for our case. "
"However, the controllers will still need to be tuned for the particular "
"machine/network/environment they are operating in. The Connext flow "
"controllers can be used to tune bandwidth and its aggressiveness for "
"sending out data, though once the bandwidth of a particular setup is "
"passed, performance will start to drop."
msgstr ""

