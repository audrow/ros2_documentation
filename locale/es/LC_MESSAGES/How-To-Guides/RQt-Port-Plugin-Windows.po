# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-19 11:55+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: es\n"
"Language-Team: es <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:8
#: 5d5a9d704b964a6a99f667eec0af55ae
msgid "Porting RQt plugins to Windows"
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:12
#: bae00a14b47a41b6910b5705eae7fc8f
msgid "Table of Contents"
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:15
#: ae21918d61634236b684757d382a4550
msgid "RQt Porting examples"
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:17
#: 666ed277f8454fa4b81b9473e341667a
msgid ""
"Here is the ROS 2 port of `qt_gui_core <https://github.com/ros-"
"visualization/qt_gui_core/commit/6fb9624033a849f56d1bc1aad0e40d252bf99c2b>`_."
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:19
#: 2a112a3158744a3c838899f6a78bf254
msgid ""
"Here is the ROS 2 port of `python_qt_binding <https://github.com/ros-"
"visualization/python_qt_binding/pull/56>`__."
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:22
#: 6edc97ea51fb48198a98f36588e78887
msgid "Considerations for Windows 10"
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:25
#: 3e6b4024310a4b68894c6d4b6ef09e60
msgid "Troubles with TinyXML version 1"
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:27
#: 23019f7f436a4a6181e2c7e95a5f314a
msgid ""
"I could not successfully use TinyXML. I upgraded to TinyXML-2 where "
"needed. It’s a pretty straight forward change."
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:31
#: 62f2957d5b564f4f96b22ca8cf606a0f
msgid ""
"Checkout `this PR <https://github.com/ros-"
"visualization/qt_gui_core/pull/147>`__ for an example of porting to "
"TinyXML-2."
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:34
#: 14db3c6749174419903f77754208f6a0
msgid "Code that uses ``__cplusplus`` and code that requires pluginlib"
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:36
#: 035f677586a04215b82da0c647e88da3
msgid ""
"In some places, notably in the ROS 2 port of pluginlib, there is use of "
"the ``__cplusplus`` flag. Unfortunately on Windows Visual Studio does not"
" set this flag correctly regardless of the C++ standard that is actually "
"being used. See `this page <https://docs.microsoft.com/en-"
"us/cpp/build/reference/zc-cplusplus?view=vs-2017>`__ for more "
"information."
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:40
#: efaa6f9f571d4442b354ff90d8b3338d
msgid "To set it, you need to add the compile option ``/Zc:__cplusplus``."
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:42
#: 3325f26e4c1a495ab4abd46a9ce1d835
msgid "For example, in CMake you could do something like this:"
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:49
#: 60babeb8e9c24123a16fab2dfdcf503d
msgid "Locations of build artifacts (before install)"
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:51
#: 7a263c0de2c547c3baeae4cd8232e55b
msgid ""
"This only came up during when building ``qt_gui_cpp``. In that package, a"
" custom command depends on a target library in another part of the "
"package. However, that library isn’t installed until build is complete. "
"Windows builds in a ${configuration} directory. For example:"
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:56
#: 9ceb7cfd958b47d1b17e9d85f7324994
msgid ""
"On Linux, ``qt_gui_cpp.a`` would be built in: "
"<ros2_ws>/build/qt_gui_cpp/src/qt_gui_cpp/"
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:59
#: d33d0aeb60d2433b9537b54e0abc23a0
msgid ""
"But on Windows ``qt_gui_cpp.lib`` is built in "
"<ros2_ws>/build/qt_gui_cpp/src/qt_gui_cpp/Release"
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:62
#: 0058184ce0c54db3b2d985f663c97bc2
msgid ""
"For compatibility across platforms in this situation, use `CMake "
"generator expressions <https://cmake.org/cmake/help/v3.5/manual/cmake-"
"generator-expressions.7.html>`__. However, when you need a library to "
"link against be sure to use ``$<TARGET_LINKER_FILE:_target>`` instead of "
"``$<TARGET_FILE:_target>``. The latter will find ``.dll`` files, which "
"cannot be linked against on Windows. See an `example here "
"<https://github.com/ros-visualization/qt_gui_core/pull/162/files>`__."
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:68
#: 2948216c44f4470cab76daa49738c1db
msgid "Compiler and linker flags"
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:70
#: dcec55ecaff74a15b4e410e192d0397f
msgid ""
"In general when porting to Windows, many packages might make use of "
"additional compiler flags. You can find the Windows compiler flags on "
"`Microsoft's documentation <https://docs.microsoft.com/en-"
"us/cpp/build/reference/compiler-options-listed-by-"
"category?view=vs-2017>`__. The C++ compiler is called ``cl.exe``."
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:74
#: 316c876c7038430fa97f6b16b6d1d505
msgid ""
"For linker flags see `Microsoft's documentation "
"<https://docs.microsoft.com/en-us/cpp/build/reference/linker-"
"options?view=vs-2017>`__. The linker program is called ``link.exe``."
msgstr ""

#: ../../source/How-To-Guides/RQt-Port-Plugin-Windows.rst:77
#: fa95ef3a08e24089ac244761176b5461
msgid ""
"However, CMake actually provides many of these options in variables. This"
" `StackOverflow page <https://stackoverflow.com/questions/9298278/cmake-"
"print-out-all-accessible-variables-in-a-script>`__ contains a good "
"example of how to see all the CMake variables available in a script."
msgstr ""

